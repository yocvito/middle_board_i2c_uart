ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB42:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** #include <string.h>
  48:Src/main.c    **** #include <stdbool.h>
  49:Src/main.c    **** #include <stdio.h>
  50:Src/main.c    **** #include <stm32l0xx_nucleo_32.h>
  51:Src/main.c    **** #include <stdlib.h>
  52:Src/main.c    **** #include <ctype.h>
  53:Src/main.c    **** #include <stdint.h>
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  58:Src/main.c    **** /* USER CODE BEGIN PTD */
  59:Src/main.c    **** 
  60:Src/main.c    **** /*!
  61:Src/main.c    ****  *  Structure définissant le buffer circulaire  
  62:Src/main.c    ****  */
  63:Src/main.c    **** typedef struct circ_bbuf_t
  64:Src/main.c    **** {
  65:Src/main.c    ****   uint8_t *const buffer;
  66:Src/main.c    ****   int head;
  67:Src/main.c    ****   int tail;
  68:Src/main.c    ****   const int maxlen;
  69:Src/main.c    **** } circ_bbuf_t;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PTD */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  74:Src/main.c    **** /* USER CODE BEGIN PD */
  75:Src/main.c    **** 
  76:Src/main.c    **** /*!
  77:Src/main.c    ****  *  1 pour usage multi uart sinon 0
  78:Src/main.c    ****  */
  79:Src/main.c    **** #define USE_MULTIPLE_UART 1
  80:Src/main.c    **** 
  81:Src/main.c    **** /*!
  82:Src/main.c    ****  *  Nombres de ports uart connectés
  83:Src/main.c    ****  */
  84:Src/main.c    **** #define MAX_UART_PORT 2
  85:Src/main.c    **** 
  86:Src/main.c    **** /*!
  87:Src/main.c    ****  *  Taille des|du buffer(s) circulaire(s)
  88:Src/main.c    ****  */
  89:Src/main.c    **** #if USE_MULTIPLE_UART == 1
  90:Src/main.c    **** #define CIRC_BUFFER_MAX_SIZE    550
  91:Src/main.c    **** #else
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 3


  92:Src/main.c    **** #define CIRC_BUFFER_MAX_SIZE    1024
  93:Src/main.c    **** #endif
  94:Src/main.c    **** 
  95:Src/main.c    **** /*!
  96:Src/main.c    ****  *  Adresse i2c de la middle board (inutile)
  97:Src/main.c    ****  */
  98:Src/main.c    **** #define I2C_ADDRESS 0x08
  99:Src/main.c    **** 
 100:Src/main.c    **** /*!
 101:Src/main.c    ****  *  @brief   Maccro d'initialisation du buffer circ
 102:Src/main.c    ****  *  @param   x   label du buffer circ
 103:Src/main.c    ****  *  @param   y   taille
 104:Src/main.c    ****  */
 105:Src/main.c    **** #define CIRC_BBUF_DEF(x, y)      \
 106:Src/main.c    ****   uint8_t x##_data_space[y + 1]; \
 107:Src/main.c    ****   circ_bbuf_t x = {              \
 108:Src/main.c    ****       .buffer = x##_data_space,  \
 109:Src/main.c    ****       .head = 0,                 \
 110:Src/main.c    ****       .tail = 0,                 \
 111:Src/main.c    ****       .maxlen = y + 1}
 112:Src/main.c    **** 
 113:Src/main.c    **** /*!
 114:Src/main.c    ****  *  réinitialiser le buffer à zero
 115:Src/main.c    ****  */
 116:Src/main.c    **** #define CIRC_BBUF_RESET(x) \
 117:Src/main.c    ****   do                       \
 118:Src/main.c    ****   {                        \
 119:Src/main.c    ****     x.head = 0;            \
 120:Src/main.c    ****     x.tail = 0;            \
 121:Src/main.c    ****   } while (0)
 122:Src/main.c    **** 
 123:Src/main.c    **** /* USER CODE END PD */
 124:Src/main.c    **** 
 125:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 126:Src/main.c    **** /* USER CODE BEGIN PM */
 127:Src/main.c    **** 
 128:Src/main.c    **** /* USER CODE END PM */
 129:Src/main.c    **** 
 130:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 131:Src/main.c    **** I2C_HandleTypeDef hi2c1;
 132:Src/main.c    **** 
 133:Src/main.c    **** UART_HandleTypeDef hlpuart1;
 134:Src/main.c    **** UART_HandleTypeDef huart2;
 135:Src/main.c    **** 
 136:Src/main.c    **** /* USER CODE BEGIN PV */
 137:Src/main.c    **** 
 138:Src/main.c    **** //Init circular buffer
 139:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 140:Src/main.c    **** CIRC_BBUF_DEF(cbuf1, CIRC_BUFFER_MAX_SIZE);    // un buffer circulaire pour chaque port uart
 141:Src/main.c    **** CIRC_BBUF_DEF(cbuf2, CIRC_BUFFER_MAX_SIZE);
 142:Src/main.c    **** #else
 143:Src/main.c    **** CIRC_BBUF_DEF(cbuf, CIRC_BUFFER_MAX_SIZE);
 144:Src/main.c    **** #endif
 145:Src/main.c    **** 
 146:Src/main.c    **** /*!
 147:Src/main.c    ****  *  Buffers de réception par uart
 148:Src/main.c    ****  */
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 4


 149:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 150:Src/main.c    **** uint8_t rxBuff1 = 0;
 151:Src/main.c    **** uint8_t rxBuff2 = 0;
 152:Src/main.c    **** #else
 153:Src/main.c    **** uint8_t rxBuff = 0;
 154:Src/main.c    **** #endif
 155:Src/main.c    **** 
 156:Src/main.c    **** 
 157:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 158:Src/main.c    **** /*!
 159:Src/main.c    ****  *  Tableau contenant les différentes adresses de buffer circ
 160:Src/main.c    ****  */
 161:Src/main.c    **** circ_bbuf_t *bbuf_table[MAX_UART_PORT] = {
 162:Src/main.c    ****   &cbuf1,
 163:Src/main.c    ****   &cbuf2
 164:Src/main.c    **** };
 165:Src/main.c    **** #endif
 166:Src/main.c    **** 
 167:Src/main.c    **** /*!
 168:Src/main.c    ****  *  Port uart : utilisé comme index, on peut imagine une évolution 
 169:Src/main.c    ****  *              avec envoi du port uart en plus du caractère pour
 170:Src/main.c    ****  *              de meilleurs logs
 171:Src/main.c    ****  */
 172:Src/main.c    **** uint8_t uartPort = 1;
 173:Src/main.c    **** 
 174:Src/main.c    **** /* USER CODE END PV */
 175:Src/main.c    **** 
 176:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 177:Src/main.c    **** void SystemClock_Config(void);
 178:Src/main.c    **** static void MX_GPIO_Init(void);
 179:Src/main.c    **** static void MX_USART2_UART_Init(void);
 180:Src/main.c    **** static void MX_I2C1_Init(void);
 181:Src/main.c    **** static void MX_LPUART1_UART_Init(void);
 182:Src/main.c    **** /* USER CODE BEGIN PFP */
 183:Src/main.c    **** 
 184:Src/main.c    **** 
 185:Src/main.c    **** 
 186:Src/main.c    **** //Circular buffer functions
 187:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data);
 188:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data);
 189:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c);
 190:Src/main.c    **** 
 191:Src/main.c    **** /*!
 192:Src/main.c    ****  *  Fonction basique pour convertir un entier compris entre 0 et 9 en caractère
 193:Src/main.c    ****  */
 194:Src/main.c    **** char itoch(int i);
 195:Src/main.c    **** 
 196:Src/main.c    **** /* USER CODE END PFP */
 197:Src/main.c    **** 
 198:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 199:Src/main.c    **** /* USER CODE BEGIN 0 */
 200:Src/main.c    **** 
 201:Src/main.c    **** /* USER CODE END 0 */
 202:Src/main.c    **** 
 203:Src/main.c    **** /**
 204:Src/main.c    ****   * @brief  The application entry point.
 205:Src/main.c    ****   * @retval int
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 5


 206:Src/main.c    ****   */
 207:Src/main.c    **** int main(void)
 208:Src/main.c    **** {
 209:Src/main.c    ****   /* USER CODE BEGIN 1 */
 210:Src/main.c    **** 
 211:Src/main.c    ****   /* USER CODE END 1 */
 212:Src/main.c    **** 
 213:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 214:Src/main.c    **** 
 215:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 216:Src/main.c    ****   HAL_Init();
 217:Src/main.c    **** 
 218:Src/main.c    ****   /* USER CODE BEGIN Init */
 219:Src/main.c    **** 
 220:Src/main.c    ****   /* USER CODE END Init */
 221:Src/main.c    **** 
 222:Src/main.c    ****   /* Configure the system clock */
 223:Src/main.c    ****   SystemClock_Config();
 224:Src/main.c    **** 
 225:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 226:Src/main.c    **** 
 227:Src/main.c    ****   /* USER CODE END SysInit */
 228:Src/main.c    **** 
 229:Src/main.c    ****   /* Initialize all configured peripherals */
 230:Src/main.c    ****   MX_GPIO_Init();
 231:Src/main.c    ****   MX_USART2_UART_Init();
 232:Src/main.c    ****   MX_I2C1_Init();
 233:Src/main.c    ****   MX_LPUART1_UART_Init();
 234:Src/main.c    ****   /* USER CODE BEGIN 2 */
 235:Src/main.c    **** 
 236:Src/main.c    ****   BSP_LED_Init(LED3);
 237:Src/main.c    **** 
 238:Src/main.c    ****   BSP_LED_Off(LED3);
 239:Src/main.c    ****   
 240:Src/main.c    ****   //buffer d'envoi en i2c
 241:Src/main.c    ****   uint8_t txbuff[2] = {0};
 242:Src/main.c    ****   uint8_t buff = 0;
 243:Src/main.c    **** 
 244:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 245:Src/main.c    ****   HAL_UART_Receive_IT(&hlpuart1, &rxBuff1, 1);
 246:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff2, 1);
 247:Src/main.c    ****   /*mettre toutes les fonctions d'interupt*/
 248:Src/main.c    **** #else
 249:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff, 1);
 250:Src/main.c    **** #endif
 251:Src/main.c    ****   /* USER CODE END 2 */
 252:Src/main.c    **** 
 253:Src/main.c    ****   /* Infinite loop */
 254:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 255:Src/main.c    ****   while (1)
 256:Src/main.c    ****   {
 257:Src/main.c    ****     //on tente de récup un caractère du buffer circ
 258:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 259:Src/main.c    ****     if(circ_bbuf_pop(bbuf_table[uartPort-1], &buff) != -1)
 260:Src/main.c    **** #else
 261:Src/main.c    ****     if(circ_bbuf_pop(&cbuf, &txbuff[1]) != -1)
 262:Src/main.c    **** #endif
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 6


 263:Src/main.c    ****     {
 264:Src/main.c    ****       txbuff[0] = buff;
 265:Src/main.c    ****       txbuff[1] = itoch(uartPort);        //on convertie l'entier en caractere correspondant 
 266:Src/main.c    ****  
 267:Src/main.c    **** 
 268:Src/main.c    ****       //envoi du caractère + le port uart par i2c 
 269:Src/main.c    ****       if (HAL_I2C_Slave_Transmit(&hi2c1, txbuff, 2, 0xFF) != HAL_OK)
 270:Src/main.c    ****       {
 271:Src/main.c    ****         BSP_LED_On(LED3);
 272:Src/main.c    ****       }
 273:Src/main.c    **** 
 274:Src/main.c    ****     }
 275:Src/main.c    **** 
 276:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 277:Src/main.c    ****       //si un des 2 uart n'a toujours pas reçu de données en uart, on ne change pas de port
 278:Src/main.c    ****       if(rxBuff1 != 0 && rxBuff2 != 0)
 279:Src/main.c    ****       {
 280:Src/main.c    ****         //changement du port uart 
 281:Src/main.c    ****         if(txbuff[0] == '\r' || txbuff[0] == '\n')
 282:Src/main.c    ****         {
 283:Src/main.c    ****           if(uartPort == MAX_UART_PORT)
 284:Src/main.c    ****           {
 285:Src/main.c    ****             uartPort = 1;
 286:Src/main.c    ****           }
 287:Src/main.c    ****           else
 288:Src/main.c    ****           {
 289:Src/main.c    ****             uartPort++;
 290:Src/main.c    ****           }
 291:Src/main.c    ****         }
 292:Src/main.c    ****       }
 293:Src/main.c    **** #endif  
 294:Src/main.c    ****     /* USER CODE END WHILE */
 295:Src/main.c    **** 
 296:Src/main.c    ****     /* USER CODE BEGIN 3 */
 297:Src/main.c    ****   }
 298:Src/main.c    ****   /* USER CODE END 3 */
 299:Src/main.c    **** }
 300:Src/main.c    **** 
 301:Src/main.c    **** /**
 302:Src/main.c    ****   * @brief System Clock Configuration
 303:Src/main.c    ****   * @retval None
 304:Src/main.c    ****   */
 305:Src/main.c    **** void SystemClock_Config(void)
 306:Src/main.c    **** {
 307:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 308:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 309:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 310:Src/main.c    **** 
 311:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 312:Src/main.c    ****   */
 313:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 314:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 315:Src/main.c    ****   */
 316:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 317:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 318:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 319:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 7


 320:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 321:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 322:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 323:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 324:Src/main.c    ****   {
 325:Src/main.c    ****     Error_Handler();
 326:Src/main.c    ****   }
 327:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 328:Src/main.c    ****   */
 329:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 330:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 331:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 332:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 333:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 334:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 335:Src/main.c    **** 
 336:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 337:Src/main.c    ****   {
 338:Src/main.c    ****     Error_Handler();
 339:Src/main.c    ****   }
 340:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 341:Src/main.c    ****                               |RCC_PERIPHCLK_I2C1;
 342:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 343:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 344:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 345:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 346:Src/main.c    ****   {
 347:Src/main.c    ****     Error_Handler();
 348:Src/main.c    ****   }
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /**
 352:Src/main.c    ****   * @brief I2C1 Initialization Function
 353:Src/main.c    ****   * @param None
 354:Src/main.c    ****   * @retval None
 355:Src/main.c    ****   */
 356:Src/main.c    **** static void MX_I2C1_Init(void)
 357:Src/main.c    **** {
 358:Src/main.c    **** 
 359:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 364:Src/main.c    **** 
 365:Src/main.c    ****   //l'adresse est shift de 1 bit vers la gauche pour suivre le formalisme imposé par ST
 366:Src/main.c    ****   //hi2c1.Init.OwnAddress1 = (I2C_ADDRESS << 1);
 367:Src/main.c    **** 
 368:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
 369:Src/main.c    ****   hi2c1.Instance = I2C1;
 370:Src/main.c    ****   hi2c1.Init.Timing = 0x00100713;
 371:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 372:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 373:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 374:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 375:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 376:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 8


 377:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 378:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 379:Src/main.c    ****   {
 380:Src/main.c    ****     Error_Handler();
 381:Src/main.c    ****   }
 382:Src/main.c    ****   /**Configure Analogue filter 
 383:Src/main.c    ****   */
 384:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 385:Src/main.c    ****   {
 386:Src/main.c    ****     Error_Handler();
 387:Src/main.c    ****   }
 388:Src/main.c    ****   /**Configure Digital filter 
 389:Src/main.c    ****   */
 390:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 391:Src/main.c    ****   {
 392:Src/main.c    ****     Error_Handler();
 393:Src/main.c    ****   }
 394:Src/main.c    ****   /**I2C Fast mode Plus enable 
 395:Src/main.c    ****   */
 396:Src/main.c    ****   HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 397:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 400:Src/main.c    **** 
 401:Src/main.c    **** }
 402:Src/main.c    **** 
 403:Src/main.c    **** /**
 404:Src/main.c    ****   * @brief LPUART1 Initialization Function
 405:Src/main.c    ****   * @param None
 406:Src/main.c    ****   * @retval None
 407:Src/main.c    ****   */
 408:Src/main.c    **** static void MX_LPUART1_UART_Init(void)
 409:Src/main.c    **** {
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE END LPUART1_Init 0 */
 414:Src/main.c    **** 
 415:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 1 */
 416:Src/main.c    **** 
 417:Src/main.c    ****   /* USER CODE END LPUART1_Init 1 */
 418:Src/main.c    ****   hlpuart1.Instance = LPUART1;
 419:Src/main.c    ****   hlpuart1.Init.BaudRate = 115200;
 420:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 421:Src/main.c    ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 422:Src/main.c    ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 423:Src/main.c    ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 424:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 425:Src/main.c    ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 426:Src/main.c    ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 427:Src/main.c    ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 428:Src/main.c    ****   {
 429:Src/main.c    ****     Error_Handler();
 430:Src/main.c    ****   }
 431:Src/main.c    ****   /* USER CODE BEGIN LPUART1_Init 2 */
 432:Src/main.c    **** 
 433:Src/main.c    ****   /* USER CODE END LPUART1_Init 2 */
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 9


 434:Src/main.c    **** 
 435:Src/main.c    **** }
 436:Src/main.c    **** 
 437:Src/main.c    **** /**
 438:Src/main.c    ****   * @brief USART2 Initialization Function
 439:Src/main.c    ****   * @param None
 440:Src/main.c    ****   * @retval None
 441:Src/main.c    ****   */
 442:Src/main.c    **** static void MX_USART2_UART_Init(void)
 443:Src/main.c    **** {
 444:Src/main.c    **** 
 445:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 446:Src/main.c    **** 
 447:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 450:Src/main.c    **** 
 451:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 452:Src/main.c    ****   huart2.Instance = USART2;
 453:Src/main.c    ****   huart2.Init.BaudRate = 115200 ;
 454:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 455:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 456:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 457:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 458:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 459:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 460:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 461:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 462:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 463:Src/main.c    ****   {
 464:Src/main.c    ****     Error_Handler();
 465:Src/main.c    ****   }
 466:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 467:Src/main.c    **** 
 468:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 469:Src/main.c    **** 
 470:Src/main.c    **** }
 471:Src/main.c    **** 
 472:Src/main.c    **** /**
 473:Src/main.c    ****   * @brief GPIO Initialization Function
 474:Src/main.c    ****   * @param None
 475:Src/main.c    ****   * @retval None
 476:Src/main.c    ****   */
 477:Src/main.c    **** static void MX_GPIO_Init(void)
 478:Src/main.c    **** {
  25              		.loc 1 478 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 10


  37              		.cfi_def_cfa_offset 48
 479:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 479 0
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 03A8     		add	r0, sp, #12
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB2:
 480:Src/main.c    **** 
 481:Src/main.c    ****   /* GPIO Ports Clock Enable */
 482:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 482 0
  46 000e 154B     		ldr	r3, .L2
  47 0010 D96A     		ldr	r1, [r3, #44]
  48 0012 0422     		movs	r2, #4
  49 0014 1143     		orrs	r1, r2
  50 0016 D962     		str	r1, [r3, #44]
  51 0018 D96A     		ldr	r1, [r3, #44]
  52 001a 0A40     		ands	r2, r1
  53 001c 0092     		str	r2, [sp]
  54 001e 009A     		ldr	r2, [sp]
  55              	.LBE2:
  56              	.LBB3:
 483:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 483 0
  58 0020 DA6A     		ldr	r2, [r3, #44]
  59 0022 0124     		movs	r4, #1
  60 0024 2243     		orrs	r2, r4
  61 0026 DA62     		str	r2, [r3, #44]
  62 0028 DA6A     		ldr	r2, [r3, #44]
  63 002a 2240     		ands	r2, r4
  64 002c 0192     		str	r2, [sp, #4]
  65 002e 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
 484:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  68              		.loc 1 484 0
  69 0030 D96A     		ldr	r1, [r3, #44]
  70 0032 0222     		movs	r2, #2
  71 0034 1143     		orrs	r1, r2
  72 0036 D962     		str	r1, [r3, #44]
  73 0038 DB6A     		ldr	r3, [r3, #44]
  74 003a 1A40     		ands	r2, r3
  75 003c 0292     		str	r2, [sp, #8]
  76 003e 029B     		ldr	r3, [sp, #8]
  77              	.LBE4:
 485:Src/main.c    **** 
 486:Src/main.c    ****   /*Configure GPIO pin Output Level */
 487:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  78              		.loc 1 487 0
  79 0040 094D     		ldr	r5, .L2+4
  80 0042 0022     		movs	r2, #0
  81 0044 0821     		movs	r1, #8
  82 0046 2800     		movs	r0, r5
  83 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL1:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 11


 488:Src/main.c    **** 
 489:Src/main.c    ****   /*Configure GPIO pin : PB3 */
 490:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
  85              		.loc 1 490 0
  86 004c 0823     		movs	r3, #8
  87 004e 0393     		str	r3, [sp, #12]
 491:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 491 0
  89 0050 0494     		str	r4, [sp, #16]
 492:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  90              		.loc 1 492 0
  91 0052 0023     		movs	r3, #0
  92 0054 0593     		str	r3, [sp, #20]
 493:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  93              		.loc 1 493 0
  94 0056 0693     		str	r3, [sp, #24]
 494:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  95              		.loc 1 494 0
  96 0058 03A9     		add	r1, sp, #12
  97 005a 2800     		movs	r0, r5
  98 005c FFF7FEFF 		bl	HAL_GPIO_Init
  99              	.LVL2:
 495:Src/main.c    **** 
 496:Src/main.c    **** }
 100              		.loc 1 496 0
 101 0060 09B0     		add	sp, sp, #36
 102              		@ sp needed
 103 0062 30BD     		pop	{r4, r5, pc}
 104              	.L3:
 105              		.align	2
 106              	.L2:
 107 0064 00100240 		.word	1073876992
 108 0068 00040050 		.word	1342178304
 109              		.cfi_endproc
 110              	.LFE42:
 112              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.code	16
 116              		.thumb_func
 117              		.fpu softvfp
 119              	MX_USART2_UART_Init:
 120              	.LFB41:
 443:Src/main.c    **** 
 121              		.loc 1 443 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
 452:Src/main.c    ****   huart2.Init.BaudRate = 115200 ;
 130              		.loc 1 452 0
 131 0002 0948     		ldr	r0, .L5
 132 0004 094B     		ldr	r3, .L5+4
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 12


 133 0006 0360     		str	r3, [r0]
 453:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 134              		.loc 1 453 0
 135 0008 E123     		movs	r3, #225
 136 000a 5B02     		lsls	r3, r3, #9
 137 000c 4360     		str	r3, [r0, #4]
 454:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 138              		.loc 1 454 0
 139 000e 0023     		movs	r3, #0
 140 0010 8360     		str	r3, [r0, #8]
 455:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 141              		.loc 1 455 0
 142 0012 C360     		str	r3, [r0, #12]
 456:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 143              		.loc 1 456 0
 144 0014 0361     		str	r3, [r0, #16]
 457:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 145              		.loc 1 457 0
 146 0016 0C22     		movs	r2, #12
 147 0018 4261     		str	r2, [r0, #20]
 458:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 148              		.loc 1 458 0
 149 001a 8361     		str	r3, [r0, #24]
 459:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 150              		.loc 1 459 0
 151 001c C361     		str	r3, [r0, #28]
 460:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 152              		.loc 1 460 0
 153 001e 0362     		str	r3, [r0, #32]
 461:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 154              		.loc 1 461 0
 155 0020 4362     		str	r3, [r0, #36]
 462:Src/main.c    ****   {
 156              		.loc 1 462 0
 157 0022 FFF7FEFF 		bl	HAL_UART_Init
 158              	.LVL3:
 470:Src/main.c    **** 
 159              		.loc 1 470 0
 160              		@ sp needed
 161 0026 10BD     		pop	{r4, pc}
 162              	.L6:
 163              		.align	2
 164              	.L5:
 165 0028 00000000 		.word	huart2
 166 002c 00440040 		.word	1073759232
 167              		.cfi_endproc
 168              	.LFE41:
 170              		.section	.text.MX_LPUART1_UART_Init,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.code	16
 174              		.thumb_func
 175              		.fpu softvfp
 177              	MX_LPUART1_UART_Init:
 178              	.LFB40:
 409:Src/main.c    **** 
 179              		.loc 1 409 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 13


 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 10B5     		push	{r4, lr}
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 4, -8
 187              		.cfi_offset 14, -4
 418:Src/main.c    ****   hlpuart1.Init.BaudRate = 115200;
 188              		.loc 1 418 0
 189 0002 0948     		ldr	r0, .L8
 190 0004 094B     		ldr	r3, .L8+4
 191 0006 0360     		str	r3, [r0]
 419:Src/main.c    ****   hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 192              		.loc 1 419 0
 193 0008 E123     		movs	r3, #225
 194 000a 5B02     		lsls	r3, r3, #9
 195 000c 4360     		str	r3, [r0, #4]
 420:Src/main.c    ****   hlpuart1.Init.StopBits = UART_STOPBITS_1;
 196              		.loc 1 420 0
 197 000e 0023     		movs	r3, #0
 198 0010 8360     		str	r3, [r0, #8]
 421:Src/main.c    ****   hlpuart1.Init.Parity = UART_PARITY_NONE;
 199              		.loc 1 421 0
 200 0012 C360     		str	r3, [r0, #12]
 422:Src/main.c    ****   hlpuart1.Init.Mode = UART_MODE_TX_RX;
 201              		.loc 1 422 0
 202 0014 0361     		str	r3, [r0, #16]
 423:Src/main.c    ****   hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 203              		.loc 1 423 0
 204 0016 0C22     		movs	r2, #12
 205 0018 4261     		str	r2, [r0, #20]
 424:Src/main.c    ****   hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 206              		.loc 1 424 0
 207 001a 8361     		str	r3, [r0, #24]
 425:Src/main.c    ****   hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 208              		.loc 1 425 0
 209 001c 0362     		str	r3, [r0, #32]
 426:Src/main.c    ****   if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 210              		.loc 1 426 0
 211 001e 4362     		str	r3, [r0, #36]
 427:Src/main.c    ****   {
 212              		.loc 1 427 0
 213 0020 FFF7FEFF 		bl	HAL_UART_Init
 214              	.LVL4:
 435:Src/main.c    **** 
 215              		.loc 1 435 0
 216              		@ sp needed
 217 0024 10BD     		pop	{r4, pc}
 218              	.L9:
 219 0026 C046     		.align	2
 220              	.L8:
 221 0028 00000000 		.word	hlpuart1
 222 002c 00480040 		.word	1073760256
 223              		.cfi_endproc
 224              	.LFE40:
 226              		.section	.text.MX_I2C1_Init,"ax",%progbits
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 14


 227              		.align	1
 228              		.syntax unified
 229              		.code	16
 230              		.thumb_func
 231              		.fpu softvfp
 233              	MX_I2C1_Init:
 234              	.LFB39:
 357:Src/main.c    **** 
 235              		.loc 1 357 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239 0000 10B5     		push	{r4, lr}
 240              	.LCFI4:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 369:Src/main.c    ****   hi2c1.Init.Timing = 0x00100713;
 244              		.loc 1 369 0
 245 0002 0F4C     		ldr	r4, .L11
 246 0004 0F4B     		ldr	r3, .L11+4
 247 0006 2360     		str	r3, [r4]
 370:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 248              		.loc 1 370 0
 249 0008 0F4B     		ldr	r3, .L11+8
 250 000a 6360     		str	r3, [r4, #4]
 371:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 251              		.loc 1 371 0
 252 000c 1023     		movs	r3, #16
 253 000e A360     		str	r3, [r4, #8]
 372:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 254              		.loc 1 372 0
 255 0010 0F3B     		subs	r3, r3, #15
 256 0012 E360     		str	r3, [r4, #12]
 373:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 257              		.loc 1 373 0
 258 0014 0023     		movs	r3, #0
 259 0016 2361     		str	r3, [r4, #16]
 374:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 260              		.loc 1 374 0
 261 0018 6361     		str	r3, [r4, #20]
 375:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 262              		.loc 1 375 0
 263 001a A361     		str	r3, [r4, #24]
 376:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 264              		.loc 1 376 0
 265 001c E361     		str	r3, [r4, #28]
 377:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 266              		.loc 1 377 0
 267 001e 2362     		str	r3, [r4, #32]
 378:Src/main.c    ****   {
 268              		.loc 1 378 0
 269 0020 2000     		movs	r0, r4
 270 0022 FFF7FEFF 		bl	HAL_I2C_Init
 271              	.LVL5:
 384:Src/main.c    ****   {
 272              		.loc 1 384 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 15


 273 0026 0021     		movs	r1, #0
 274 0028 2000     		movs	r0, r4
 275 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 276              	.LVL6:
 390:Src/main.c    ****   {
 277              		.loc 1 390 0
 278 002e 0021     		movs	r1, #0
 279 0030 2000     		movs	r0, r4
 280 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 281              	.LVL7:
 396:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 282              		.loc 1 396 0
 283 0036 8020     		movs	r0, #128
 284 0038 4001     		lsls	r0, r0, #5
 285 003a FFF7FEFF 		bl	HAL_I2CEx_EnableFastModePlus
 286              	.LVL8:
 401:Src/main.c    **** 
 287              		.loc 1 401 0
 288              		@ sp needed
 289 003e 10BD     		pop	{r4, pc}
 290              	.L12:
 291              		.align	2
 292              	.L11:
 293 0040 00000000 		.word	hi2c1
 294 0044 00540040 		.word	1073763328
 295 0048 13071000 		.word	1050387
 296              		.cfi_endproc
 297              	.LFE39:
 299              		.section	.text.SystemClock_Config,"ax",%progbits
 300              		.align	1
 301              		.global	SystemClock_Config
 302              		.syntax unified
 303              		.code	16
 304              		.thumb_func
 305              		.fpu softvfp
 307              	SystemClock_Config:
 308              	.LFB38:
 306:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 309              		.loc 1 306 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 96
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 10B5     		push	{r4, lr}
 314              	.LCFI5:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 4, -8
 317              		.cfi_offset 14, -4
 318 0002 98B0     		sub	sp, sp, #96
 319              	.LCFI6:
 320              		.cfi_def_cfa_offset 104
 307:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 321              		.loc 1 307 0
 322 0004 3422     		movs	r2, #52
 323 0006 0021     		movs	r1, #0
 324 0008 0BA8     		add	r0, sp, #44
 325 000a FFF7FEFF 		bl	memset
 326              	.LVL9:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 16


 308:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 327              		.loc 1 308 0
 328 000e 1422     		movs	r2, #20
 329 0010 0021     		movs	r1, #0
 330 0012 06A8     		add	r0, sp, #24
 331 0014 FFF7FEFF 		bl	memset
 332              	.LVL10:
 309:Src/main.c    **** 
 333              		.loc 1 309 0
 334 0018 1822     		movs	r2, #24
 335 001a 0021     		movs	r1, #0
 336 001c 6846     		mov	r0, sp
 337 001e FFF7FEFF 		bl	memset
 338              	.LVL11:
 313:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 339              		.loc 1 313 0
 340 0022 1749     		ldr	r1, .L14
 341 0024 0B68     		ldr	r3, [r1]
 342 0026 174A     		ldr	r2, .L14+4
 343 0028 1A40     		ands	r2, r3
 344 002a 8023     		movs	r3, #128
 345 002c 1B01     		lsls	r3, r3, #4
 346 002e 1343     		orrs	r3, r2
 347 0030 0B60     		str	r3, [r1]
 316:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 348              		.loc 1 316 0
 349 0032 0223     		movs	r3, #2
 350 0034 0B93     		str	r3, [sp, #44]
 317:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 351              		.loc 1 317 0
 352 0036 0122     		movs	r2, #1
 353 0038 0E92     		str	r2, [sp, #56]
 318:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 354              		.loc 1 318 0
 355 003a 0F32     		adds	r2, r2, #15
 356 003c 0F92     		str	r2, [sp, #60]
 319:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 357              		.loc 1 319 0
 358 003e 1493     		str	r3, [sp, #80]
 320:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 359              		.loc 1 320 0
 360 0040 0024     		movs	r4, #0
 361 0042 1594     		str	r4, [sp, #84]
 321:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 362              		.loc 1 321 0
 363 0044 8023     		movs	r3, #128
 364 0046 DB02     		lsls	r3, r3, #11
 365 0048 1693     		str	r3, [sp, #88]
 322:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 366              		.loc 1 322 0
 367 004a 8023     		movs	r3, #128
 368 004c DB03     		lsls	r3, r3, #15
 369 004e 1793     		str	r3, [sp, #92]
 323:Src/main.c    ****   {
 370              		.loc 1 323 0
 371 0050 0BA8     		add	r0, sp, #44
 372 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 17


 373              	.LVL12:
 329:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 374              		.loc 1 329 0
 375 0056 0F23     		movs	r3, #15
 376 0058 0693     		str	r3, [sp, #24]
 331:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 377              		.loc 1 331 0
 378 005a 0C3B     		subs	r3, r3, #12
 379 005c 0793     		str	r3, [sp, #28]
 332:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 380              		.loc 1 332 0
 381 005e 0894     		str	r4, [sp, #32]
 333:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 382              		.loc 1 333 0
 383 0060 0994     		str	r4, [sp, #36]
 334:Src/main.c    **** 
 384              		.loc 1 334 0
 385 0062 0A94     		str	r4, [sp, #40]
 336:Src/main.c    ****   {
 386              		.loc 1 336 0
 387 0064 0121     		movs	r1, #1
 388 0066 06A8     		add	r0, sp, #24
 389 0068 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 390              	.LVL13:
 340:Src/main.c    ****                               |RCC_PERIPHCLK_I2C1;
 391              		.loc 1 340 0
 392 006c 0E23     		movs	r3, #14
 393 006e 0093     		str	r3, [sp]
 342:Src/main.c    ****   PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 394              		.loc 1 342 0
 395 0070 0294     		str	r4, [sp, #8]
 343:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 396              		.loc 1 343 0
 397 0072 0394     		str	r4, [sp, #12]
 344:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 398              		.loc 1 344 0
 399 0074 0494     		str	r4, [sp, #16]
 345:Src/main.c    ****   {
 400              		.loc 1 345 0
 401 0076 6846     		mov	r0, sp
 402 0078 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 403              	.LVL14:
 349:Src/main.c    **** 
 404              		.loc 1 349 0
 405 007c 18B0     		add	sp, sp, #96
 406              		@ sp needed
 407 007e 10BD     		pop	{r4, pc}
 408              	.L15:
 409              		.align	2
 410              	.L14:
 411 0080 00700040 		.word	1073770496
 412 0084 FFE7FFFF 		.word	-6145
 413              		.cfi_endproc
 414              	.LFE38:
 416              		.section	.text.circ_bbuf_push,"ax",%progbits
 417              		.align	1
 418              		.global	circ_bbuf_push
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 18


 419              		.syntax unified
 420              		.code	16
 421              		.thumb_func
 422              		.fpu softvfp
 424              	circ_bbuf_push:
 425              	.LFB43:
 497:Src/main.c    **** 
 498:Src/main.c    **** /* USER CODE BEGIN 4 */
 499:Src/main.c    **** 
 500:Src/main.c    **** /*!
 501:Src/main.c    ****  * @brief   Permet de mettre une valeur dans le buffer circulaire
 502:Src/main.c    ****  * @param   c           circular buffer address
 503:Src/main.c    ****  * @param   data        données à mettre dans le buffer circulaire
 504:Src/main.c    ****  * @retval  int         0 - Success
 505:Src/main.c    ****  *                     -1 - Out of space
 506:Src/main.c    ****  */
 507:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data)
 508:Src/main.c    **** {
 426              		.loc 1 508 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL15:
 431 0000 10B5     		push	{r4, lr}
 432              	.LCFI7:
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 4, -8
 435              		.cfi_offset 14, -4
 509:Src/main.c    ****   int next;
 510:Src/main.c    **** 
 511:Src/main.c    ****   next = c->head + 1; // next is where head will point to after this write.
 436              		.loc 1 511 0
 437 0002 4268     		ldr	r2, [r0, #4]
 438 0004 531C     		adds	r3, r2, #1
 439              	.LVL16:
 512:Src/main.c    ****   if (next >= c->maxlen)
 440              		.loc 1 512 0
 441 0006 C468     		ldr	r4, [r0, #12]
 442 0008 9C42     		cmp	r4, r3
 443 000a 00DC     		bgt	.L17
 513:Src/main.c    ****     next = 0;
 444              		.loc 1 513 0
 445 000c 0023     		movs	r3, #0
 446              	.LVL17:
 447              	.L17:
 514:Src/main.c    **** 
 515:Src/main.c    ****   // if the head + 1 == tail, circular buffer is full. Notice that one slot
 516:Src/main.c    ****   // is always left empty to differentiate empty vs full condition
 517:Src/main.c    ****   if (next == c->tail)
 448              		.loc 1 517 0
 449 000e 8468     		ldr	r4, [r0, #8]
 450 0010 9C42     		cmp	r4, r3
 451 0012 04D0     		beq	.L20
 518:Src/main.c    ****     return -1;
 519:Src/main.c    **** 
 520:Src/main.c    ****   c->buffer[c->head] = data; // Load data and then move
 452              		.loc 1 520 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 19


 453 0014 0468     		ldr	r4, [r0]
 454 0016 A154     		strb	r1, [r4, r2]
 521:Src/main.c    ****   c->head = next;            // head to next data offset.
 455              		.loc 1 521 0
 456 0018 4360     		str	r3, [r0, #4]
 522:Src/main.c    ****   return 0;                  // return success to indicate successful push.
 457              		.loc 1 522 0
 458 001a 0020     		movs	r0, #0
 459              	.LVL18:
 460              	.L16:
 523:Src/main.c    **** }
 461              		.loc 1 523 0
 462              		@ sp needed
 463 001c 10BD     		pop	{r4, pc}
 464              	.LVL19:
 465              	.L20:
 518:Src/main.c    **** 
 466              		.loc 1 518 0
 467 001e 0120     		movs	r0, #1
 468              	.LVL20:
 469 0020 4042     		rsbs	r0, r0, #0
 470 0022 FBE7     		b	.L16
 471              		.cfi_endproc
 472              	.LFE43:
 474              		.section	.text.circ_bbuf_pop,"ax",%progbits
 475              		.align	1
 476              		.global	circ_bbuf_pop
 477              		.syntax unified
 478              		.code	16
 479              		.thumb_func
 480              		.fpu softvfp
 482              	circ_bbuf_pop:
 483              	.LFB44:
 524:Src/main.c    **** 
 525:Src/main.c    **** /*!
 526:Src/main.c    ****  * @brief   Permet de récupérer la valeur à lire dans le buffer circulaire
 527:Src/main.c    ****  * @param   c           circular buffer address
 528:Src/main.c    ****  * @param   data        variable pour acceuillir la valeur pop
 529:Src/main.c    ****  * @retval  int         0 - Success
 530:Src/main.c    ****  *                     -1 - Empty
 531:Src/main.c    ****  */
 532:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data)
 533:Src/main.c    **** {
 484              		.loc 1 533 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              	.LVL21:
 489 0000 10B5     		push	{r4, lr}
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 534:Src/main.c    ****   int next;
 535:Src/main.c    **** 
 536:Src/main.c    ****   if (c->head == c->tail) // if the head == tail, we don't have any data
 494              		.loc 1 536 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 20


 495 0002 8368     		ldr	r3, [r0, #8]
 496 0004 4268     		ldr	r2, [r0, #4]
 497 0006 9A42     		cmp	r2, r3
 498 0008 0AD0     		beq	.L24
 537:Src/main.c    ****     return -1;
 538:Src/main.c    **** 
 539:Src/main.c    ****   next = c->tail + 1; // next is where tail will point to after this read.
 499              		.loc 1 539 0
 500 000a 5A1C     		adds	r2, r3, #1
 501              	.LVL22:
 540:Src/main.c    ****   if (next >= c->maxlen)
 502              		.loc 1 540 0
 503 000c C468     		ldr	r4, [r0, #12]
 504 000e 9442     		cmp	r4, r2
 505 0010 00DC     		bgt	.L23
 541:Src/main.c    ****     next = 0;
 506              		.loc 1 541 0
 507 0012 0022     		movs	r2, #0
 508              	.LVL23:
 509              	.L23:
 542:Src/main.c    **** 
 543:Src/main.c    ****   *data = c->buffer[c->tail]; // Read data and then move
 510              		.loc 1 543 0
 511 0014 0468     		ldr	r4, [r0]
 512 0016 E35C     		ldrb	r3, [r4, r3]
 513 0018 0B70     		strb	r3, [r1]
 544:Src/main.c    ****   c->tail = next;             // tail to next offset.
 514              		.loc 1 544 0
 515 001a 8260     		str	r2, [r0, #8]
 545:Src/main.c    ****   return 0;                   // return success to indicate successful push.
 516              		.loc 1 545 0
 517 001c 0020     		movs	r0, #0
 518              	.LVL24:
 519              	.L21:
 546:Src/main.c    **** }
 520              		.loc 1 546 0
 521              		@ sp needed
 522 001e 10BD     		pop	{r4, pc}
 523              	.LVL25:
 524              	.L24:
 537:Src/main.c    **** 
 525              		.loc 1 537 0
 526 0020 0120     		movs	r0, #1
 527              	.LVL26:
 528 0022 4042     		rsbs	r0, r0, #0
 529 0024 FBE7     		b	.L21
 530              		.cfi_endproc
 531              	.LFE44:
 533              		.section	.text.circ_bbuf_free_space,"ax",%progbits
 534              		.align	1
 535              		.global	circ_bbuf_free_space
 536              		.syntax unified
 537              		.code	16
 538              		.thumb_func
 539              		.fpu softvfp
 541              	circ_bbuf_free_space:
 542              	.LFB45:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 21


 547:Src/main.c    **** 
 548:Src/main.c    **** /*!
 549:Src/main.c    ****  * @brief   Permet de récupérer la taille de l'espace libre dans le buffer circulaire
 550:Src/main.c    ****  * @param   c           circular buffer address
 551:Src/main.c    ****  * @retval  int         number of bytes available
 552:Src/main.c    ****  */
 553:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c)
 554:Src/main.c    **** {
 543              		.loc 1 554 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL27:
 555:Src/main.c    ****   int freeSpace;
 556:Src/main.c    ****   freeSpace = c->tail - c->head;
 549              		.loc 1 556 0
 550 0000 8368     		ldr	r3, [r0, #8]
 551 0002 4268     		ldr	r2, [r0, #4]
 552 0004 9B1A     		subs	r3, r3, r2
 553              	.LVL28:
 557:Src/main.c    ****   if (freeSpace <= 0)
 554              		.loc 1 557 0
 555 0006 002B     		cmp	r3, #0
 556 0008 01DD     		ble	.L28
 557              	.L27:
 558:Src/main.c    ****     freeSpace += c->maxlen;
 559:Src/main.c    ****   return freeSpace - 1; // -1 to account for the always-empty slot.
 558              		.loc 1 559 0
 559 000a 581E     		subs	r0, r3, #1
 560              	.LVL29:
 560:Src/main.c    **** }
 561              		.loc 1 560 0
 562              		@ sp needed
 563 000c 7047     		bx	lr
 564              	.LVL30:
 565              	.L28:
 558:Src/main.c    ****     freeSpace += c->maxlen;
 566              		.loc 1 558 0
 567 000e C268     		ldr	r2, [r0, #12]
 568 0010 9B18     		adds	r3, r3, r2
 569              	.LVL31:
 570 0012 FAE7     		b	.L27
 571              		.cfi_endproc
 572              	.LFE45:
 574              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 575              		.align	1
 576              		.global	HAL_UART_RxCpltCallback
 577              		.syntax unified
 578              		.code	16
 579              		.thumb_func
 580              		.fpu softvfp
 582              	HAL_UART_RxCpltCallback:
 583              	.LFB46:
 561:Src/main.c    **** 
 562:Src/main.c    **** 
 563:Src/main.c    **** /*!
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 22


 564:Src/main.c    ****  * @brief   Callback de la fonction d'interuption HAL_UART_Receive_IT(...)
 565:Src/main.c    ****  * @param   huart       pointeur vers une structure de l'uart
 566:Src/main.c    ****  * @retval  none
 567:Src/main.c    ****  */
 568:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 569:Src/main.c    **** {
 584              		.loc 1 569 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL32:
 589 0000 70B5     		push	{r4, r5, r6, lr}
 590              	.LCFI9:
 591              		.cfi_def_cfa_offset 16
 592              		.cfi_offset 4, -16
 593              		.cfi_offset 5, -12
 594              		.cfi_offset 6, -8
 595              		.cfi_offset 14, -4
 596 0002 0400     		movs	r4, r0
 570:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 571:Src/main.c    ****   if(huart == &huart2)
 597              		.loc 1 571 0
 598 0004 0E4B     		ldr	r3, .L34
 599 0006 9842     		cmp	r0, r3
 600 0008 03D0     		beq	.L32
 572:Src/main.c    ****   {
 573:Src/main.c    ****     circ_bbuf_push(&cbuf2, rxBuff2);
 574:Src/main.c    ****     HAL_UART_Receive_IT(huart, &rxBuff2, 1);
 575:Src/main.c    ****   }
 576:Src/main.c    ****   else if(huart == &hlpuart1)
 601              		.loc 1 576 0
 602 000a 0E4B     		ldr	r3, .L34+4
 603 000c 9842     		cmp	r0, r3
 604 000e 0BD0     		beq	.L33
 605              	.LVL33:
 606              	.L29:
 577:Src/main.c    ****   {
 578:Src/main.c    ****     circ_bbuf_push(&cbuf1, rxBuff1);
 579:Src/main.c    ****     HAL_UART_Receive_IT(huart, &rxBuff1, 1);
 580:Src/main.c    ****   }
 581:Src/main.c    ****        
 582:Src/main.c    **** #else
 583:Src/main.c    ****   circ_bbuf_push(&cbuf, rxBuff);
 584:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff, 1);
 585:Src/main.c    **** #endif
 586:Src/main.c    **** }
 607              		.loc 1 586 0
 608              		@ sp needed
 609              	.LVL34:
 610 0010 70BD     		pop	{r4, r5, r6, pc}
 611              	.LVL35:
 612              	.L32:
 573:Src/main.c    ****     HAL_UART_Receive_IT(huart, &rxBuff2, 1);
 613              		.loc 1 573 0
 614 0012 0D4D     		ldr	r5, .L34+8
 615 0014 2978     		ldrb	r1, [r5]
 616 0016 0D48     		ldr	r0, .L34+12
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 23


 617              	.LVL36:
 618 0018 FFF7FEFF 		bl	circ_bbuf_push
 619              	.LVL37:
 574:Src/main.c    ****   }
 620              		.loc 1 574 0
 621 001c 0122     		movs	r2, #1
 622 001e 2900     		movs	r1, r5
 623 0020 2000     		movs	r0, r4
 624 0022 FFF7FEFF 		bl	HAL_UART_Receive_IT
 625              	.LVL38:
 626 0026 F3E7     		b	.L29
 627              	.LVL39:
 628              	.L33:
 578:Src/main.c    ****     HAL_UART_Receive_IT(huart, &rxBuff1, 1);
 629              		.loc 1 578 0
 630 0028 094D     		ldr	r5, .L34+16
 631 002a 2978     		ldrb	r1, [r5]
 632 002c 0948     		ldr	r0, .L34+20
 633              	.LVL40:
 634 002e FFF7FEFF 		bl	circ_bbuf_push
 635              	.LVL41:
 579:Src/main.c    ****   }
 636              		.loc 1 579 0
 637 0032 0122     		movs	r2, #1
 638 0034 2900     		movs	r1, r5
 639 0036 2000     		movs	r0, r4
 640 0038 FFF7FEFF 		bl	HAL_UART_Receive_IT
 641              	.LVL42:
 642              		.loc 1 586 0
 643 003c E8E7     		b	.L29
 644              	.L35:
 645 003e C046     		.align	2
 646              	.L34:
 647 0040 00000000 		.word	huart2
 648 0044 00000000 		.word	hlpuart1
 649 0048 00000000 		.word	.LANCHOR0
 650 004c 00000000 		.word	.LANCHOR1
 651 0050 00000000 		.word	.LANCHOR2
 652 0054 00000000 		.word	.LANCHOR3
 653              		.cfi_endproc
 654              	.LFE46:
 656              		.section	.text.itoch,"ax",%progbits
 657              		.align	1
 658              		.global	itoch
 659              		.syntax unified
 660              		.code	16
 661              		.thumb_func
 662              		.fpu softvfp
 664              	itoch:
 665              	.LFB47:
 587:Src/main.c    **** 
 588:Src/main.c    **** char itoch(int i)
 589:Src/main.c    **** {
 666              		.loc 1 589 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 24


 670              		@ link register save eliminated.
 671              	.LVL43:
 590:Src/main.c    ****   return (i + '0') ;
 672              		.loc 1 590 0
 673 0000 3030     		adds	r0, r0, #48
 674              	.LVL44:
 675 0002 C0B2     		uxtb	r0, r0
 676              	.LVL45:
 591:Src/main.c    **** }
 677              		.loc 1 591 0
 678              		@ sp needed
 679 0004 7047     		bx	lr
 680              		.cfi_endproc
 681              	.LFE47:
 683              		.section	.text.main,"ax",%progbits
 684              		.align	1
 685              		.global	main
 686              		.syntax unified
 687              		.code	16
 688              		.thumb_func
 689              		.fpu softvfp
 691              	main:
 692              	.LFB37:
 208:Src/main.c    ****   /* USER CODE BEGIN 1 */
 693              		.loc 1 208 0
 694              		.cfi_startproc
 695              		@ Volatile: function does not return.
 696              		@ args = 0, pretend = 0, frame = 8
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698 0000 10B5     		push	{r4, lr}
 699              	.LCFI10:
 700              		.cfi_def_cfa_offset 8
 701              		.cfi_offset 4, -8
 702              		.cfi_offset 14, -4
 703 0002 82B0     		sub	sp, sp, #8
 704              	.LCFI11:
 705              		.cfi_def_cfa_offset 16
 216:Src/main.c    **** 
 706              		.loc 1 216 0
 707 0004 FFF7FEFF 		bl	HAL_Init
 708              	.LVL46:
 223:Src/main.c    **** 
 709              		.loc 1 223 0
 710 0008 FFF7FEFF 		bl	SystemClock_Config
 711              	.LVL47:
 230:Src/main.c    ****   MX_USART2_UART_Init();
 712              		.loc 1 230 0
 713 000c FFF7FEFF 		bl	MX_GPIO_Init
 714              	.LVL48:
 231:Src/main.c    ****   MX_I2C1_Init();
 715              		.loc 1 231 0
 716 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 717              	.LVL49:
 232:Src/main.c    ****   MX_LPUART1_UART_Init();
 718              		.loc 1 232 0
 719 0014 FFF7FEFF 		bl	MX_I2C1_Init
 720              	.LVL50:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 25


 233:Src/main.c    ****   /* USER CODE BEGIN 2 */
 721              		.loc 1 233 0
 722 0018 FFF7FEFF 		bl	MX_LPUART1_UART_Init
 723              	.LVL51:
 236:Src/main.c    **** 
 724              		.loc 1 236 0
 725 001c 0020     		movs	r0, #0
 726 001e FFF7FEFF 		bl	BSP_LED_Init
 727              	.LVL52:
 238:Src/main.c    ****   
 728              		.loc 1 238 0
 729 0022 0020     		movs	r0, #0
 730 0024 FFF7FEFF 		bl	BSP_LED_Off
 731              	.LVL53:
 241:Src/main.c    ****   uint8_t buff = 0;
 732              		.loc 1 241 0
 733 0028 01AB     		add	r3, sp, #4
 734 002a 0022     		movs	r2, #0
 735 002c 1A80     		strh	r2, [r3]
 242:Src/main.c    **** 
 736              		.loc 1 242 0
 737 002e 6B46     		mov	r3, sp
 738 0030 DA70     		strb	r2, [r3, #3]
 245:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff2, 1);
 739              		.loc 1 245 0
 740 0032 0122     		movs	r2, #1
 741 0034 2249     		ldr	r1, .L45
 742 0036 2348     		ldr	r0, .L45+4
 743 0038 FFF7FEFF 		bl	HAL_UART_Receive_IT
 744              	.LVL54:
 246:Src/main.c    ****   /*mettre toutes les fonctions d'interupt*/
 745              		.loc 1 246 0
 746 003c 0122     		movs	r2, #1
 747 003e 2249     		ldr	r1, .L45+8
 748 0040 2248     		ldr	r0, .L45+12
 749 0042 FFF7FEFF 		bl	HAL_UART_Receive_IT
 750              	.LVL55:
 751 0046 1CE0     		b	.L38
 752              	.L44:
 264:Src/main.c    ****       txbuff[1] = itoch(uartPort);        //on convertie l'entier en caractere correspondant 
 753              		.loc 1 264 0
 754 0048 01AC     		add	r4, sp, #4
 755 004a 6B46     		mov	r3, sp
 756 004c 0333     		adds	r3, r3, #3
 757 004e 1B78     		ldrb	r3, [r3]
 758 0050 2370     		strb	r3, [r4]
 265:Src/main.c    ****  
 759              		.loc 1 265 0
 760 0052 1F4B     		ldr	r3, .L45+16
 761 0054 1878     		ldrb	r0, [r3]
 762 0056 FFF7FEFF 		bl	itoch
 763              	.LVL56:
 764 005a 6070     		strb	r0, [r4, #1]
 269:Src/main.c    ****       {
 765              		.loc 1 269 0
 766 005c FF23     		movs	r3, #255
 767 005e 0222     		movs	r2, #2
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 26


 768 0060 2100     		movs	r1, r4
 769 0062 1C48     		ldr	r0, .L45+20
 770 0064 FFF7FEFF 		bl	HAL_I2C_Slave_Transmit
 771              	.LVL57:
 772 0068 0028     		cmp	r0, #0
 773 006a 16D0     		beq	.L39
 271:Src/main.c    ****       }
 774              		.loc 1 271 0
 775 006c 0020     		movs	r0, #0
 776 006e FFF7FEFF 		bl	BSP_LED_On
 777              	.LVL58:
 778 0072 12E0     		b	.L39
 779              	.L41:
 283:Src/main.c    ****           {
 780              		.loc 1 283 0
 781 0074 164B     		ldr	r3, .L45+16
 782 0076 1B78     		ldrb	r3, [r3]
 783 0078 022B     		cmp	r3, #2
 784 007a 1DD0     		beq	.L43
 289:Src/main.c    ****           }
 785              		.loc 1 289 0
 786 007c 0133     		adds	r3, r3, #1
 787 007e 144A     		ldr	r2, .L45+16
 788 0080 1370     		strb	r3, [r2]
 789              	.L38:
 259:Src/main.c    **** #else
 790              		.loc 1 259 0
 791 0082 134B     		ldr	r3, .L45+16
 792 0084 1B78     		ldrb	r3, [r3]
 793 0086 013B     		subs	r3, r3, #1
 794 0088 9B00     		lsls	r3, r3, #2
 795 008a 134A     		ldr	r2, .L45+24
 796 008c 9858     		ldr	r0, [r3, r2]
 797 008e 6B46     		mov	r3, sp
 798 0090 D91C     		adds	r1, r3, #3
 799 0092 FFF7FEFF 		bl	circ_bbuf_pop
 800              	.LVL59:
 801 0096 431C     		adds	r3, r0, #1
 802 0098 D6D1     		bne	.L44
 803              	.L39:
 278:Src/main.c    ****       {
 804              		.loc 1 278 0
 805 009a 094B     		ldr	r3, .L45
 806 009c 1B78     		ldrb	r3, [r3]
 807 009e 002B     		cmp	r3, #0
 808 00a0 EFD0     		beq	.L38
 278:Src/main.c    ****       {
 809              		.loc 1 278 0 is_stmt 0 discriminator 1
 810 00a2 094B     		ldr	r3, .L45+8
 811 00a4 1B78     		ldrb	r3, [r3]
 812 00a6 002B     		cmp	r3, #0
 813 00a8 EBD0     		beq	.L38
 281:Src/main.c    ****         {
 814              		.loc 1 281 0 is_stmt 1
 815 00aa 01AB     		add	r3, sp, #4
 816 00ac 1B78     		ldrb	r3, [r3]
 817 00ae 0D2B     		cmp	r3, #13
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 27


 818 00b0 E0D0     		beq	.L41
 281:Src/main.c    ****         {
 819              		.loc 1 281 0 is_stmt 0 discriminator 1
 820 00b2 0A2B     		cmp	r3, #10
 821 00b4 E5D1     		bne	.L38
 822 00b6 DDE7     		b	.L41
 823              	.L43:
 285:Src/main.c    ****           }
 824              		.loc 1 285 0 is_stmt 1
 825 00b8 054B     		ldr	r3, .L45+16
 826 00ba 0122     		movs	r2, #1
 827 00bc 1A70     		strb	r2, [r3]
 828 00be E0E7     		b	.L38
 829              	.L46:
 830              		.align	2
 831              	.L45:
 832 00c0 00000000 		.word	.LANCHOR2
 833 00c4 00000000 		.word	hlpuart1
 834 00c8 00000000 		.word	.LANCHOR0
 835 00cc 00000000 		.word	huart2
 836 00d0 00000000 		.word	.LANCHOR4
 837 00d4 00000000 		.word	hi2c1
 838 00d8 00000000 		.word	.LANCHOR5
 839              		.cfi_endproc
 840              	.LFE37:
 842              		.section	.text.Error_Handler,"ax",%progbits
 843              		.align	1
 844              		.global	Error_Handler
 845              		.syntax unified
 846              		.code	16
 847              		.thumb_func
 848              		.fpu softvfp
 850              	Error_Handler:
 851              	.LFB48:
 592:Src/main.c    **** 
 593:Src/main.c    **** /* USER CODE END 4 */
 594:Src/main.c    **** 
 595:Src/main.c    **** /**
 596:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 597:Src/main.c    ****   * @retval None
 598:Src/main.c    ****   */
 599:Src/main.c    **** void Error_Handler(void)
 600:Src/main.c    **** {
 852              		.loc 1 600 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 0, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 601:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 602:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 603:Src/main.c    **** 
 604:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 605:Src/main.c    **** }
 857              		.loc 1 605 0
 858              		@ sp needed
 859 0000 7047     		bx	lr
 860              		.cfi_endproc
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 28


 861              	.LFE48:
 863              		.global	uartPort
 864              		.global	bbuf_table
 865              		.global	rxBuff2
 866              		.global	rxBuff1
 867              		.global	cbuf2
 868              		.comm	cbuf2_data_space,551,4
 869              		.global	cbuf1
 870              		.comm	cbuf1_data_space,551,4
 871              		.comm	huart2,128,4
 872              		.comm	hlpuart1,128,4
 873              		.comm	hi2c1,76,4
 874              		.section	.bss.rxBuff1,"aw",%nobits
 875              		.set	.LANCHOR2,. + 0
 878              	rxBuff1:
 879 0000 00       		.space	1
 880              		.section	.bss.rxBuff2,"aw",%nobits
 881              		.set	.LANCHOR0,. + 0
 884              	rxBuff2:
 885 0000 00       		.space	1
 886              		.section	.data.bbuf_table,"aw",%progbits
 887              		.align	2
 888              		.set	.LANCHOR5,. + 0
 891              	bbuf_table:
 892 0000 00000000 		.word	cbuf1
 893 0004 00000000 		.word	cbuf2
 894              		.section	.data.cbuf1,"aw",%progbits
 895              		.align	2
 896              		.set	.LANCHOR3,. + 0
 899              	cbuf1:
 900 0000 00000000 		.word	cbuf1_data_space
 901 0004 00000000 		.word	0
 902 0008 00000000 		.word	0
 903 000c 27020000 		.word	551
 904              		.section	.data.cbuf2,"aw",%progbits
 905              		.align	2
 906              		.set	.LANCHOR1,. + 0
 909              	cbuf2:
 910 0000 00000000 		.word	cbuf2_data_space
 911 0004 00000000 		.word	0
 912 0008 00000000 		.word	0
 913 000c 27020000 		.word	551
 914              		.section	.data.uartPort,"aw",%progbits
 915              		.set	.LANCHOR4,. + 0
 918              	uartPort:
 919 0000 01       		.byte	1
 920              		.text
 921              	.Letext0:
 922              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 923              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 924              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 925              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 926              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 927              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 928              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 929              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 930              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 29


 931              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h"
 932              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 933              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 934              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 935              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 936              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 937              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 938              		.file 18 "Drivers/BSP/STM32L0XX_Nucleo_32/stm32l0xx_nucleo_32.h"
 939              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 940              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 941              		.file 21 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h"
 942              		.file 22 "<built-in>"
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:16     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:107    .text.MX_GPIO_Init:00000064 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:113    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:119    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:165    .text.MX_USART2_UART_Init:00000028 $d
                            *COM*:00000080 huart2
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:171    .text.MX_LPUART1_UART_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:177    .text.MX_LPUART1_UART_Init:00000000 MX_LPUART1_UART_Init
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:221    .text.MX_LPUART1_UART_Init:00000028 $d
                            *COM*:00000080 hlpuart1
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:227    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:233    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:293    .text.MX_I2C1_Init:00000040 $d
                            *COM*:0000004c hi2c1
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:300    .text.SystemClock_Config:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:307    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:411    .text.SystemClock_Config:00000080 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:417    .text.circ_bbuf_push:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:424    .text.circ_bbuf_push:00000000 circ_bbuf_push
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:475    .text.circ_bbuf_pop:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:482    .text.circ_bbuf_pop:00000000 circ_bbuf_pop
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:534    .text.circ_bbuf_free_space:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:541    .text.circ_bbuf_free_space:00000000 circ_bbuf_free_space
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:575    .text.HAL_UART_RxCpltCallback:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:582    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:647    .text.HAL_UART_RxCpltCallback:00000040 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:657    .text.itoch:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:664    .text.itoch:00000000 itoch
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:684    .text.main:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:691    .text.main:00000000 main
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:832    .text.main:000000c0 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:843    .text.Error_Handler:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:850    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:918    .data.uartPort:00000000 uartPort
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:891    .data.bbuf_table:00000000 bbuf_table
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:884    .bss.rxBuff2:00000000 rxBuff2
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:878    .bss.rxBuff1:00000000 rxBuff1
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:909    .data.cbuf2:00000000 cbuf2
                            *COM*:00000227 cbuf2_data_space
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:899    .data.cbuf1:00000000 cbuf1
                            *COM*:00000227 cbuf1_data_space
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:879    .bss.rxBuff1:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:885    .bss.rxBuff2:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:887    .data.bbuf_table:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:895    .data.cbuf1:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s:905    .data.cbuf2:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccFEeFUd.s 			page 31


HAL_I2CEx_ConfigDigitalFilter
HAL_I2CEx_EnableFastModePlus
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_UART_Receive_IT
HAL_Init
BSP_LED_Init
BSP_LED_Off
HAL_I2C_Slave_Transmit
BSP_LED_On
