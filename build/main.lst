ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB41:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** #include <string.h>
  48:Src/main.c    **** #include <stdbool.h>
  49:Src/main.c    **** #include <stdio.h>
  50:Src/main.c    **** #include <stm32l0xx_nucleo_32.h>
  51:Src/main.c    **** #include <stdlib.h>
  52:Src/main.c    **** #include <ctype.h>
  53:Src/main.c    **** 
  54:Src/main.c    **** /* USER CODE END Includes */
  55:Src/main.c    **** 
  56:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  57:Src/main.c    **** /* USER CODE BEGIN PTD */
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE END PTD */
  60:Src/main.c    **** 
  61:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  62:Src/main.c    **** /* USER CODE BEGIN PD */
  63:Src/main.c    **** 
  64:Src/main.c    **** #define TXBUFFERSIZE 200
  65:Src/main.c    **** #define CRITICAL_STRING_SIZE 170
  66:Src/main.c    **** 
  67:Src/main.c    **** /* USER CODE END PD */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  70:Src/main.c    **** /* USER CODE BEGIN PM */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PM */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  75:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  76:Src/main.c    **** 
  77:Src/main.c    **** UART_HandleTypeDef huart2;
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE BEGIN PV */
  80:Src/main.c    **** 
  81:Src/main.c    **** uint8_t txBuff[TXBUFFERSIZE] = {0};
  82:Src/main.c    **** 
  83:Src/main.c    **** char str_deveui[24] = {0};
  84:Src/main.c    **** 
  85:Src/main.c    **** /* USER CODE END PV */
  86:Src/main.c    **** 
  87:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  88:Src/main.c    **** void SystemClock_Config(void);
  89:Src/main.c    **** static void MX_GPIO_Init(void);
  90:Src/main.c    **** static void MX_USART2_UART_Init(void);
  91:Src/main.c    **** static void MX_I2C1_Init(void);
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 3


  92:Src/main.c    **** /* USER CODE BEGIN PFP */
  93:Src/main.c    **** 
  94:Src/main.c    **** static bool isDevEui(char *str);
  95:Src/main.c    **** 
  96:Src/main.c    **** char **str_split(char *a_str, const char a_delim);
  97:Src/main.c    **** 
  98:Src/main.c    **** /* USER CODE END PFP */
  99:Src/main.c    **** 
 100:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 101:Src/main.c    **** /* USER CODE BEGIN 0 */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* USER CODE END 0 */
 104:Src/main.c    **** 
 105:Src/main.c    **** /**
 106:Src/main.c    ****   * @brief  The application entry point.
 107:Src/main.c    ****   * @retval int
 108:Src/main.c    ****   */
 109:Src/main.c    **** int main(void)
 110:Src/main.c    **** {
 111:Src/main.c    ****   /* USER CODE BEGIN 1 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 1 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 118:Src/main.c    ****   HAL_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE BEGIN Init */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* USER CODE END Init */
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* Configure the system clock */
 125:Src/main.c    ****   SystemClock_Config();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END SysInit */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* Initialize all configured peripherals */
 132:Src/main.c    ****   MX_GPIO_Init();
 133:Src/main.c    ****   MX_USART2_UART_Init();
 134:Src/main.c    ****   MX_I2C1_Init();
 135:Src/main.c    ****   /* USER CODE BEGIN 2 */
 136:Src/main.c    **** 
 137:Src/main.c    ****   BSP_LED_Init(LED3);
 138:Src/main.c    **** 
 139:Src/main.c    ****   BSP_LED_Off(LED3);
 140:Src/main.c    **** 
 141:Src/main.c    ****   uint8_t buff[2] = {0};
 142:Src/main.c    **** 
 143:Src/main.c    ****   bool endline = false;
 144:Src/main.c    **** 
 145:Src/main.c    ****   /* USER CODE END 2 */
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* Infinite loop */
 148:Src/main.c    ****   /* USER CODE BEGIN WHILE */
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 4


 149:Src/main.c    ****   while (1)
 150:Src/main.c    ****   {
 151:Src/main.c    ****     while (HAL_UART_Receive_IT(&huart2, buff, 1) == HAL_OK)
 152:Src/main.c    ****     {
 153:Src/main.c    ****       if (endline == false)
 154:Src/main.c    ****       {
 155:Src/main.c    ****         if (buff[0] == '\r')
 156:Src/main.c    ****         {
 157:Src/main.c    ****           endline = true;
 158:Src/main.c    **** 
 159:Src/main.c    ****           if(isDevEui(txBuff))
 160:Src/main.c    ****             BSP_LED_On(LED3);
 161:Src/main.c    **** 
 162:Src/main.c    ****           if (strcmp(&txBuff[strlen(txBuff) - 11], "==== ######") == 0)
 163:Src/main.c    ****             strcat((char *)txBuff, "\r\n\r\n");
 164:Src/main.c    ****           else
 165:Src/main.c    ****             strcat((char *)txBuff, "\r\n");
 166:Src/main.c    **** 
 167:Src/main.c    ****           HAL_UART_Transmit_IT(&huart2, txBuff, strlen(txBuff));
 168:Src/main.c    **** 
 169:Src/main.c    ****           txBuff[0] = '\0';
 170:Src/main.c    ****           //memset(txBuff, 0, sizeof(char)*TXBUFFERSIZE);
 171:Src/main.c    ****           
 172:Src/main.c    ****           //HAL_UART_Transmit_IT(&huart2, txBuff, strlen(txBuff));
 173:Src/main.c    ****         }
 174:Src/main.c    ****         else
 175:Src/main.c    ****         {
 176:Src/main.c    ****           strcat(txBuff, buff);
 177:Src/main.c    ****         }
 178:Src/main.c    **** 
 179:Src/main.c    ****       }
 180:Src/main.c    ****       else
 181:Src/main.c    ****       {
 182:Src/main.c    ****         endline = !endline;
 183:Src/main.c    ****       }
 184:Src/main.c    ****     }
 185:Src/main.c    ****     /* USER CODE END WHILE */
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* USER CODE BEGIN 3 */
 188:Src/main.c    ****   }
 189:Src/main.c    ****   /* USER CODE END 3 */
 190:Src/main.c    **** }
 191:Src/main.c    **** 
 192:Src/main.c    **** /**
 193:Src/main.c    ****   * @brief System Clock Configuration
 194:Src/main.c    ****   * @retval None
 195:Src/main.c    ****   */
 196:Src/main.c    **** void SystemClock_Config(void)
 197:Src/main.c    **** {
 198:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 199:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 200:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 201:Src/main.c    **** 
 202:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 203:Src/main.c    ****   */
 204:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 205:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 5


 206:Src/main.c    ****   */
 207:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 208:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 209:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 213:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 214:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 215:Src/main.c    ****   {
 216:Src/main.c    ****     Error_Handler();
 217:Src/main.c    ****   }
 218:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 219:Src/main.c    ****   */
 220:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 221:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 222:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 223:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 224:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 225:Src/main.c    **** 
 226:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 227:Src/main.c    ****   {
 228:Src/main.c    ****     Error_Handler();
 229:Src/main.c    ****   }
 230:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 231:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 232:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 233:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 234:Src/main.c    ****   {
 235:Src/main.c    ****     Error_Handler();
 236:Src/main.c    ****   }
 237:Src/main.c    **** }
 238:Src/main.c    **** 
 239:Src/main.c    **** /**
 240:Src/main.c    ****   * @brief I2C1 Initialization Function
 241:Src/main.c    ****   * @param None
 242:Src/main.c    ****   * @retval None
 243:Src/main.c    ****   */
 244:Src/main.c    **** static void MX_I2C1_Init(void)
 245:Src/main.c    **** {
 246:Src/main.c    **** 
 247:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 248:Src/main.c    **** 
 249:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 250:Src/main.c    **** 
 251:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 252:Src/main.c    **** 
 253:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
 254:Src/main.c    ****   hi2c1.Instance = I2C1;
 255:Src/main.c    ****   hi2c1.Init.Timing = 0x00100413;
 256:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 257:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 258:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 259:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 260:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 261:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 262:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 6


 263:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 264:Src/main.c    ****   {
 265:Src/main.c    ****     Error_Handler();
 266:Src/main.c    ****   }
 267:Src/main.c    ****   /**Configure Analogue filter 
 268:Src/main.c    ****   */
 269:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 270:Src/main.c    ****   {
 271:Src/main.c    ****     Error_Handler();
 272:Src/main.c    ****   }
 273:Src/main.c    ****   /**Configure Digital filter 
 274:Src/main.c    ****   */
 275:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 276:Src/main.c    ****   {
 277:Src/main.c    ****     Error_Handler();
 278:Src/main.c    ****   }
 279:Src/main.c    ****   /**I2C Fast mode Plus enable 
 280:Src/main.c    ****   */
 281:Src/main.c    ****   HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 282:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 283:Src/main.c    **** 
 284:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 285:Src/main.c    **** }
 286:Src/main.c    **** 
 287:Src/main.c    **** /**
 288:Src/main.c    ****   * @brief USART2 Initialization Function
 289:Src/main.c    ****   * @param None
 290:Src/main.c    ****   * @retval None
 291:Src/main.c    ****   */
 292:Src/main.c    **** static void MX_USART2_UART_Init(void)
 293:Src/main.c    **** {
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 298:Src/main.c    **** 
 299:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 300:Src/main.c    **** 
 301:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 302:Src/main.c    ****   huart2.Instance = USART2;
 303:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 304:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 305:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 306:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 307:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 308:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 309:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 310:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 311:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 312:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 313:Src/main.c    ****   {
 314:Src/main.c    ****     Error_Handler();
 315:Src/main.c    ****   }
 316:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 317:Src/main.c    **** 
 318:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 319:Src/main.c    **** }
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 7


 320:Src/main.c    **** 
 321:Src/main.c    **** /**
 322:Src/main.c    ****   * @brief GPIO Initialization Function
 323:Src/main.c    ****   * @param None
 324:Src/main.c    ****   * @retval None
 325:Src/main.c    ****   */
 326:Src/main.c    **** static void MX_GPIO_Init(void)
 327:Src/main.c    **** {
  25              		.loc 1 327 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 328:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 328 0
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 03A8     		add	r0, sp, #12
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB2:
 329:Src/main.c    **** 
 330:Src/main.c    ****   /* GPIO Ports Clock Enable */
 331:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 331 0
  46 000e 154B     		ldr	r3, .L2
  47 0010 D96A     		ldr	r1, [r3, #44]
  48 0012 0422     		movs	r2, #4
  49 0014 1143     		orrs	r1, r2
  50 0016 D962     		str	r1, [r3, #44]
  51 0018 D96A     		ldr	r1, [r3, #44]
  52 001a 0A40     		ands	r2, r1
  53 001c 0092     		str	r2, [sp]
  54 001e 009A     		ldr	r2, [sp]
  55              	.LBE2:
  56              	.LBB3:
 332:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 332 0
  58 0020 DA6A     		ldr	r2, [r3, #44]
  59 0022 0124     		movs	r4, #1
  60 0024 2243     		orrs	r2, r4
  61 0026 DA62     		str	r2, [r3, #44]
  62 0028 DA6A     		ldr	r2, [r3, #44]
  63 002a 2240     		ands	r2, r4
  64 002c 0192     		str	r2, [sp, #4]
  65 002e 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
 333:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 8


  68              		.loc 1 333 0
  69 0030 D96A     		ldr	r1, [r3, #44]
  70 0032 0222     		movs	r2, #2
  71 0034 1143     		orrs	r1, r2
  72 0036 D962     		str	r1, [r3, #44]
  73 0038 DB6A     		ldr	r3, [r3, #44]
  74 003a 1A40     		ands	r2, r3
  75 003c 0292     		str	r2, [sp, #8]
  76 003e 029B     		ldr	r3, [sp, #8]
  77              	.LBE4:
 334:Src/main.c    **** 
 335:Src/main.c    ****   /*Configure GPIO pin Output Level */
 336:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  78              		.loc 1 336 0
  79 0040 094D     		ldr	r5, .L2+4
  80 0042 0022     		movs	r2, #0
  81 0044 0821     		movs	r1, #8
  82 0046 2800     		movs	r0, r5
  83 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL1:
 337:Src/main.c    **** 
 338:Src/main.c    ****   /*Configure GPIO pin : PB3 */
 339:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
  85              		.loc 1 339 0
  86 004c 0823     		movs	r3, #8
  87 004e 0393     		str	r3, [sp, #12]
 340:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 340 0
  89 0050 0494     		str	r4, [sp, #16]
 341:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  90              		.loc 1 341 0
  91 0052 0023     		movs	r3, #0
  92 0054 0593     		str	r3, [sp, #20]
 342:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  93              		.loc 1 342 0
  94 0056 0693     		str	r3, [sp, #24]
 343:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  95              		.loc 1 343 0
  96 0058 03A9     		add	r1, sp, #12
  97 005a 2800     		movs	r0, r5
  98 005c FFF7FEFF 		bl	HAL_GPIO_Init
  99              	.LVL2:
 344:Src/main.c    **** }
 100              		.loc 1 344 0
 101 0060 09B0     		add	sp, sp, #36
 102              		@ sp needed
 103 0062 30BD     		pop	{r4, r5, pc}
 104              	.L3:
 105              		.align	2
 106              	.L2:
 107 0064 00100240 		.word	1073876992
 108 0068 00040050 		.word	1342178304
 109              		.cfi_endproc
 110              	.LFE41:
 112              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 9


 115              		.code	16
 116              		.thumb_func
 117              		.fpu softvfp
 119              	MX_USART2_UART_Init:
 120              	.LFB40:
 293:Src/main.c    **** 
 121              		.loc 1 293 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
 302:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 130              		.loc 1 302 0
 131 0002 0948     		ldr	r0, .L5
 132 0004 094B     		ldr	r3, .L5+4
 133 0006 0360     		str	r3, [r0]
 303:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 134              		.loc 1 303 0
 135 0008 E123     		movs	r3, #225
 136 000a 5B02     		lsls	r3, r3, #9
 137 000c 4360     		str	r3, [r0, #4]
 304:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 138              		.loc 1 304 0
 139 000e 0023     		movs	r3, #0
 140 0010 8360     		str	r3, [r0, #8]
 305:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 141              		.loc 1 305 0
 142 0012 C360     		str	r3, [r0, #12]
 306:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 143              		.loc 1 306 0
 144 0014 0361     		str	r3, [r0, #16]
 307:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 145              		.loc 1 307 0
 146 0016 0C22     		movs	r2, #12
 147 0018 4261     		str	r2, [r0, #20]
 308:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 148              		.loc 1 308 0
 149 001a 8361     		str	r3, [r0, #24]
 309:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 150              		.loc 1 309 0
 151 001c C361     		str	r3, [r0, #28]
 310:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 152              		.loc 1 310 0
 153 001e 0362     		str	r3, [r0, #32]
 311:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 154              		.loc 1 311 0
 155 0020 4362     		str	r3, [r0, #36]
 312:Src/main.c    ****   {
 156              		.loc 1 312 0
 157 0022 FFF7FEFF 		bl	HAL_UART_Init
 158              	.LVL3:
 319:Src/main.c    **** 
 159              		.loc 1 319 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 10


 160              		@ sp needed
 161 0026 10BD     		pop	{r4, pc}
 162              	.L6:
 163              		.align	2
 164              	.L5:
 165 0028 00000000 		.word	huart2
 166 002c 00440040 		.word	1073759232
 167              		.cfi_endproc
 168              	.LFE40:
 170              		.section	.text.MX_I2C1_Init,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.code	16
 174              		.thumb_func
 175              		.fpu softvfp
 177              	MX_I2C1_Init:
 178              	.LFB39:
 245:Src/main.c    **** 
 179              		.loc 1 245 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 10B5     		push	{r4, lr}
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 4, -8
 187              		.cfi_offset 14, -4
 254:Src/main.c    ****   hi2c1.Init.Timing = 0x00100413;
 188              		.loc 1 254 0
 189 0002 0F4C     		ldr	r4, .L8
 190 0004 0F4B     		ldr	r3, .L8+4
 191 0006 2360     		str	r3, [r4]
 255:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 192              		.loc 1 255 0
 193 0008 0F4B     		ldr	r3, .L8+8
 194 000a 6360     		str	r3, [r4, #4]
 256:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 195              		.loc 1 256 0
 196 000c 1023     		movs	r3, #16
 197 000e A360     		str	r3, [r4, #8]
 257:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 198              		.loc 1 257 0
 199 0010 0F3B     		subs	r3, r3, #15
 200 0012 E360     		str	r3, [r4, #12]
 258:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 201              		.loc 1 258 0
 202 0014 0023     		movs	r3, #0
 203 0016 2361     		str	r3, [r4, #16]
 259:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 204              		.loc 1 259 0
 205 0018 6361     		str	r3, [r4, #20]
 260:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 206              		.loc 1 260 0
 207 001a A361     		str	r3, [r4, #24]
 261:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 208              		.loc 1 261 0
 209 001c E361     		str	r3, [r4, #28]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 11


 262:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 210              		.loc 1 262 0
 211 001e 2362     		str	r3, [r4, #32]
 263:Src/main.c    ****   {
 212              		.loc 1 263 0
 213 0020 2000     		movs	r0, r4
 214 0022 FFF7FEFF 		bl	HAL_I2C_Init
 215              	.LVL4:
 269:Src/main.c    ****   {
 216              		.loc 1 269 0
 217 0026 0021     		movs	r1, #0
 218 0028 2000     		movs	r0, r4
 219 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 220              	.LVL5:
 275:Src/main.c    ****   {
 221              		.loc 1 275 0
 222 002e 0021     		movs	r1, #0
 223 0030 2000     		movs	r0, r4
 224 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 225              	.LVL6:
 281:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 226              		.loc 1 281 0
 227 0036 8020     		movs	r0, #128
 228 0038 4001     		lsls	r0, r0, #5
 229 003a FFF7FEFF 		bl	HAL_I2CEx_EnableFastModePlus
 230              	.LVL7:
 285:Src/main.c    **** 
 231              		.loc 1 285 0
 232              		@ sp needed
 233 003e 10BD     		pop	{r4, pc}
 234              	.L9:
 235              		.align	2
 236              	.L8:
 237 0040 00000000 		.word	hi2c1
 238 0044 00540040 		.word	1073763328
 239 0048 13041000 		.word	1049619
 240              		.cfi_endproc
 241              	.LFE39:
 243              		.section	.text.isDevEui,"ax",%progbits
 244              		.align	1
 245              		.syntax unified
 246              		.code	16
 247              		.thumb_func
 248              		.fpu softvfp
 250              	isDevEui:
 251              	.LFB42:
 345:Src/main.c    **** 
 346:Src/main.c    **** /* USER CODE BEGIN 4 */
 347:Src/main.c    **** 
 348:Src/main.c    **** /*!
 349:Src/main.c    ****  *  Analyse des différents charactères des données de la trame pour reconnaitre ou non le DevEui
 350:Src/main.c    ****  *  @param str      Données reçu par UART
 351:Src/main.c    ****  *  @retval boolean
 352:Src/main.c    ****  */
 353:Src/main.c    **** static bool isDevEui(char *str)
 354:Src/main.c    **** {
 252              		.loc 1 354 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 12


 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL8:
 257 0000 70B5     		push	{r4, r5, r6, lr}
 258              	.LCFI4:
 259              		.cfi_def_cfa_offset 16
 260              		.cfi_offset 4, -16
 261              		.cfi_offset 5, -12
 262              		.cfi_offset 6, -8
 263              		.cfi_offset 14, -4
 264 0002 0600     		movs	r6, r0
 265              	.LVL9:
 355:Src/main.c    ****   bool ret = false;
 356:Src/main.c    ****   /*char **tab_eui = str_split(str, '-');
 357:Src/main.c    ****   if (tab_eui)
 358:Src/main.c    ****   {
 359:Src/main.c    ****     int i;
 360:Src/main.c    ****     for (i = 0; i < 8; i++)
 361:Src/main.c    ****     {
 362:Src/main.c    ****       if (isxdigit(tab_eui[i][0]))
 363:Src/main.c    ****       {
 364:Src/main.c    ****         if (isxdigit(tab_eui[i][1]))
 365:Src/main.c    ****         {
 366:Src/main.c    ****           ret = true;
 367:Src/main.c    ****         }
 368:Src/main.c    ****         else
 369:Src/main.c    ****         {
 370:Src/main.c    ****           ret = false;
 371:Src/main.c    ****         }
 372:Src/main.c    ****       }
 373:Src/main.c    ****       else
 374:Src/main.c    ****       {
 375:Src/main.c    ****         ret = false;
 376:Src/main.c    ****       }
 377:Src/main.c    ****     }
 378:Src/main.c    ****   }*/
 379:Src/main.c    ****   if( (strlen(str)-1) >= 37)
 266              		.loc 1 379 0
 267 0004 FFF7FEFF 		bl	strlen
 268              	.LVL10:
 269 0008 0138     		subs	r0, r0, #1
 270 000a 2428     		cmp	r0, #36
 271 000c 03D9     		bls	.L18
 272              	.LBB5:
 380:Src/main.c    ****   {
 381:Src/main.c    ****     for(int i=15, k=i+2; i<37 ; i++)
 273              		.loc 1 381 0
 274 000e 1125     		movs	r5, #17
 275 0010 0F24     		movs	r4, #15
 276              	.LBE5:
 355:Src/main.c    ****   bool ret = false;
 277              		.loc 1 355 0
 278 0012 0020     		movs	r0, #0
 279 0014 0BE0     		b	.L11
 280              	.L18:
 281 0016 0020     		movs	r0, #0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 13


 282              	.LVL11:
 283              	.L12:
 382:Src/main.c    ****     {
 383:Src/main.c    ****       if( k != i )
 384:Src/main.c    ****       {
 385:Src/main.c    ****         if( isxdigit(str[i]) )
 386:Src/main.c    ****           ret = true;
 387:Src/main.c    ****         else
 388:Src/main.c    ****           ret = false;    
 389:Src/main.c    ****       }
 390:Src/main.c    ****       else
 391:Src/main.c    ****       {
 392:Src/main.c    ****         k += 3;
 393:Src/main.c    ****       }   
 394:Src/main.c    ****     }
 395:Src/main.c    ****   }
 396:Src/main.c    ****   return ret;
 397:Src/main.c    **** }
 284              		.loc 1 397 0
 285              		@ sp needed
 286              	.LVL12:
 287 0018 70BD     		pop	{r4, r5, r6, pc}
 288              	.LVL13:
 289              	.L19:
 290              	.LBB6:
 385:Src/main.c    ****           ret = true;
 291              		.loc 1 385 0
 292 001a FFF7FEFF 		bl	__locale_ctype_ptr
 293              	.LVL14:
 294 001e 335D     		ldrb	r3, [r6, r4]
 295 0020 C018     		adds	r0, r0, r3
 296 0022 4378     		ldrb	r3, [r0, #1]
 297 0024 4422     		movs	r2, #68
 298 0026 1A42     		tst	r2, r3
 299 0028 07D0     		beq	.L17
 386:Src/main.c    ****         else
 300              		.loc 1 386 0
 301 002a 0120     		movs	r0, #1
 302              	.L14:
 303              	.LVL15:
 381:Src/main.c    ****     {
 304              		.loc 1 381 0 discriminator 2
 305 002c 0134     		adds	r4, r4, #1
 306              	.LVL16:
 307              	.L11:
 381:Src/main.c    ****     {
 308              		.loc 1 381 0 is_stmt 0 discriminator 1
 309 002e 242C     		cmp	r4, #36
 310 0030 F2DC     		bgt	.L12
 383:Src/main.c    ****       {
 311              		.loc 1 383 0 is_stmt 1
 312 0032 AC42     		cmp	r4, r5
 313 0034 F1D1     		bne	.L19
 392:Src/main.c    ****       }   
 314              		.loc 1 392 0
 315 0036 0335     		adds	r5, r5, #3
 316              	.LVL17:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 14


 317 0038 F8E7     		b	.L14
 318              	.LVL18:
 319              	.L17:
 388:Src/main.c    ****       }
 320              		.loc 1 388 0
 321 003a 0020     		movs	r0, #0
 322 003c F6E7     		b	.L14
 323              	.LBE6:
 324              		.cfi_endproc
 325              	.LFE42:
 327              		.section	.text.SystemClock_Config,"ax",%progbits
 328              		.align	1
 329              		.global	SystemClock_Config
 330              		.syntax unified
 331              		.code	16
 332              		.thumb_func
 333              		.fpu softvfp
 335              	SystemClock_Config:
 336              	.LFB38:
 197:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 337              		.loc 1 197 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 96
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341 0000 10B5     		push	{r4, lr}
 342              	.LCFI5:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
 346 0002 98B0     		sub	sp, sp, #96
 347              	.LCFI6:
 348              		.cfi_def_cfa_offset 104
 198:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 349              		.loc 1 198 0
 350 0004 3422     		movs	r2, #52
 351 0006 0021     		movs	r1, #0
 352 0008 0BA8     		add	r0, sp, #44
 353 000a FFF7FEFF 		bl	memset
 354              	.LVL19:
 199:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 355              		.loc 1 199 0
 356 000e 1422     		movs	r2, #20
 357 0010 0021     		movs	r1, #0
 358 0012 06A8     		add	r0, sp, #24
 359 0014 FFF7FEFF 		bl	memset
 360              	.LVL20:
 200:Src/main.c    **** 
 361              		.loc 1 200 0
 362 0018 1822     		movs	r2, #24
 363 001a 0021     		movs	r1, #0
 364 001c 6846     		mov	r0, sp
 365 001e FFF7FEFF 		bl	memset
 366              	.LVL21:
 204:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 367              		.loc 1 204 0
 368 0022 1749     		ldr	r1, .L21
 369 0024 0B68     		ldr	r3, [r1]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 15


 370 0026 174A     		ldr	r2, .L21+4
 371 0028 1A40     		ands	r2, r3
 372 002a 8023     		movs	r3, #128
 373 002c 1B01     		lsls	r3, r3, #4
 374 002e 1343     		orrs	r3, r2
 375 0030 0B60     		str	r3, [r1]
 207:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 376              		.loc 1 207 0
 377 0032 0223     		movs	r3, #2
 378 0034 0B93     		str	r3, [sp, #44]
 208:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 379              		.loc 1 208 0
 380 0036 0122     		movs	r2, #1
 381 0038 0E92     		str	r2, [sp, #56]
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 382              		.loc 1 209 0
 383 003a 0F32     		adds	r2, r2, #15
 384 003c 0F92     		str	r2, [sp, #60]
 210:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 385              		.loc 1 210 0
 386 003e 1493     		str	r3, [sp, #80]
 211:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 387              		.loc 1 211 0
 388 0040 0024     		movs	r4, #0
 389 0042 1594     		str	r4, [sp, #84]
 212:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 390              		.loc 1 212 0
 391 0044 8023     		movs	r3, #128
 392 0046 DB02     		lsls	r3, r3, #11
 393 0048 1693     		str	r3, [sp, #88]
 213:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 394              		.loc 1 213 0
 395 004a 8023     		movs	r3, #128
 396 004c DB03     		lsls	r3, r3, #15
 397 004e 1793     		str	r3, [sp, #92]
 214:Src/main.c    ****   {
 398              		.loc 1 214 0
 399 0050 0BA8     		add	r0, sp, #44
 400 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 401              	.LVL22:
 220:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 402              		.loc 1 220 0
 403 0056 0F23     		movs	r3, #15
 404 0058 0693     		str	r3, [sp, #24]
 221:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 405              		.loc 1 221 0
 406 005a 0C3B     		subs	r3, r3, #12
 407 005c 0793     		str	r3, [sp, #28]
 222:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 408              		.loc 1 222 0
 409 005e 0894     		str	r4, [sp, #32]
 223:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 410              		.loc 1 223 0
 411 0060 0994     		str	r4, [sp, #36]
 224:Src/main.c    **** 
 412              		.loc 1 224 0
 413 0062 0A94     		str	r4, [sp, #40]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 16


 226:Src/main.c    ****   {
 414              		.loc 1 226 0
 415 0064 0121     		movs	r1, #1
 416 0066 06A8     		add	r0, sp, #24
 417 0068 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 418              	.LVL23:
 230:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 419              		.loc 1 230 0
 420 006c 0A23     		movs	r3, #10
 421 006e 0093     		str	r3, [sp]
 231:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 422              		.loc 1 231 0
 423 0070 0294     		str	r4, [sp, #8]
 232:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 424              		.loc 1 232 0
 425 0072 0494     		str	r4, [sp, #16]
 233:Src/main.c    ****   {
 426              		.loc 1 233 0
 427 0074 6846     		mov	r0, sp
 428 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 429              	.LVL24:
 237:Src/main.c    **** 
 430              		.loc 1 237 0
 431 007a 18B0     		add	sp, sp, #96
 432              		@ sp needed
 433 007c 10BD     		pop	{r4, pc}
 434              	.L22:
 435 007e C046     		.align	2
 436              	.L21:
 437 0080 00700040 		.word	1073770496
 438 0084 FFE7FFFF 		.word	-6145
 439              		.cfi_endproc
 440              	.LFE38:
 442              		.section	.text.main,"ax",%progbits
 443              		.align	1
 444              		.global	main
 445              		.syntax unified
 446              		.code	16
 447              		.thumb_func
 448              		.fpu softvfp
 450              	main:
 451              	.LFB37:
 110:Src/main.c    ****   /* USER CODE BEGIN 1 */
 452              		.loc 1 110 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 0, uses_anonymous_args = 0
 456 0000 30B5     		push	{r4, r5, lr}
 457              	.LCFI7:
 458              		.cfi_def_cfa_offset 12
 459              		.cfi_offset 4, -12
 460              		.cfi_offset 5, -8
 461              		.cfi_offset 14, -4
 462 0002 83B0     		sub	sp, sp, #12
 463              	.LCFI8:
 464              		.cfi_def_cfa_offset 24
 118:Src/main.c    **** 
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 17


 465              		.loc 1 118 0
 466 0004 FFF7FEFF 		bl	HAL_Init
 467              	.LVL25:
 125:Src/main.c    **** 
 468              		.loc 1 125 0
 469 0008 FFF7FEFF 		bl	SystemClock_Config
 470              	.LVL26:
 132:Src/main.c    ****   MX_USART2_UART_Init();
 471              		.loc 1 132 0
 472 000c FFF7FEFF 		bl	MX_GPIO_Init
 473              	.LVL27:
 133:Src/main.c    ****   MX_I2C1_Init();
 474              		.loc 1 133 0
 475 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 476              	.LVL28:
 134:Src/main.c    ****   /* USER CODE BEGIN 2 */
 477              		.loc 1 134 0
 478 0014 FFF7FEFF 		bl	MX_I2C1_Init
 479              	.LVL29:
 137:Src/main.c    **** 
 480              		.loc 1 137 0
 481 0018 0020     		movs	r0, #0
 482 001a FFF7FEFF 		bl	BSP_LED_Init
 483              	.LVL30:
 139:Src/main.c    **** 
 484              		.loc 1 139 0
 485 001e 0020     		movs	r0, #0
 486 0020 FFF7FEFF 		bl	BSP_LED_Off
 487              	.LVL31:
 141:Src/main.c    **** 
 488              		.loc 1 141 0
 489 0024 01AB     		add	r3, sp, #4
 490 0026 0022     		movs	r2, #0
 491 0028 1A80     		strh	r2, [r3]
 492              	.LVL32:
 143:Src/main.c    **** 
 493              		.loc 1 143 0
 494 002a 0024     		movs	r4, #0
 495 002c 2EE0     		b	.L24
 496              	.LVL33:
 497              	.L33:
 159:Src/main.c    ****             BSP_LED_On(LED3);
 498              		.loc 1 159 0
 499 002e 2148     		ldr	r0, .L34
 500 0030 FFF7FEFF 		bl	isDevEui
 501              	.LVL34:
 502 0034 0028     		cmp	r0, #0
 503 0036 1DD1     		bne	.L32
 504              	.L27:
 162:Src/main.c    ****             strcat((char *)txBuff, "\r\n\r\n");
 505              		.loc 1 162 0
 506 0038 1E4C     		ldr	r4, .L34
 507 003a 2000     		movs	r0, r4
 508 003c FFF7FEFF 		bl	strlen
 509              	.LVL35:
 510 0040 0500     		movs	r5, r0
 511 0042 0B38     		subs	r0, r0, #11
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 18


 512 0044 0019     		adds	r0, r0, r4
 513 0046 1C49     		ldr	r1, .L34+4
 514 0048 FFF7FEFF 		bl	strcmp
 515              	.LVL36:
 516 004c 0028     		cmp	r0, #0
 517 004e 15D1     		bne	.L28
 163:Src/main.c    ****           else
 518              		.loc 1 163 0
 519 0050 6019     		adds	r0, r4, r5
 520 0052 0522     		movs	r2, #5
 521 0054 1949     		ldr	r1, .L34+8
 522 0056 FFF7FEFF 		bl	memcpy
 523              	.LVL37:
 524              	.L29:
 167:Src/main.c    **** 
 525              		.loc 1 167 0
 526 005a 164C     		ldr	r4, .L34
 527 005c 2000     		movs	r0, r4
 528 005e FFF7FEFF 		bl	strlen
 529              	.LVL38:
 530 0062 82B2     		uxth	r2, r0
 531 0064 2100     		movs	r1, r4
 532 0066 1648     		ldr	r0, .L34+12
 533 0068 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 534              	.LVL39:
 169:Src/main.c    ****           //memset(txBuff, 0, sizeof(char)*TXBUFFERSIZE);
 535              		.loc 1 169 0
 536 006c 0023     		movs	r3, #0
 537 006e 2370     		strb	r3, [r4]
 157:Src/main.c    **** 
 538              		.loc 1 157 0
 539 0070 0124     		movs	r4, #1
 540 0072 0BE0     		b	.L24
 541              	.L32:
 160:Src/main.c    **** 
 542              		.loc 1 160 0
 543 0074 0020     		movs	r0, #0
 544 0076 FFF7FEFF 		bl	BSP_LED_On
 545              	.LVL40:
 546 007a DDE7     		b	.L27
 547              	.L28:
 165:Src/main.c    **** 
 548              		.loc 1 165 0
 549 007c 0D48     		ldr	r0, .L34
 550 007e 4019     		adds	r0, r0, r5
 551 0080 0322     		movs	r2, #3
 552 0082 1049     		ldr	r1, .L34+16
 553 0084 FFF7FEFF 		bl	memcpy
 554              	.LVL41:
 555 0088 E7E7     		b	.L29
 556              	.LVL42:
 557              	.L31:
 182:Src/main.c    ****       }
 558              		.loc 1 182 0
 559 008a 1C00     		movs	r4, r3
 560              	.LVL43:
 561              	.L24:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 19


 151:Src/main.c    ****     {
 562              		.loc 1 151 0
 563 008c 0122     		movs	r2, #1
 564 008e 01A9     		add	r1, sp, #4
 565 0090 0B48     		ldr	r0, .L34+12
 566 0092 FFF7FEFF 		bl	HAL_UART_Receive_IT
 567              	.LVL44:
 568 0096 0028     		cmp	r0, #0
 569 0098 F8D1     		bne	.L24
 153:Src/main.c    ****       {
 570              		.loc 1 153 0
 571 009a 0123     		movs	r3, #1
 572 009c 6340     		eors	r3, r4
 573 009e 002C     		cmp	r4, #0
 574 00a0 F3D1     		bne	.L31
 155:Src/main.c    ****         {
 575              		.loc 1 155 0
 576 00a2 01AB     		add	r3, sp, #4
 577 00a4 1B78     		ldrb	r3, [r3]
 578 00a6 0D2B     		cmp	r3, #13
 579 00a8 C1D0     		beq	.L33
 176:Src/main.c    ****         }
 580              		.loc 1 176 0
 581 00aa 01A9     		add	r1, sp, #4
 582 00ac 0148     		ldr	r0, .L34
 583 00ae FFF7FEFF 		bl	strcat
 584              	.LVL45:
 585 00b2 EBE7     		b	.L24
 586              	.L35:
 587              		.align	2
 588              	.L34:
 589 00b4 00000000 		.word	txBuff
 590 00b8 00000000 		.word	.LC3
 591 00bc 0C000000 		.word	.LC5
 592 00c0 00000000 		.word	huart2
 593 00c4 14000000 		.word	.LC7
 594              		.cfi_endproc
 595              	.LFE37:
 597              		.section	.text.str_split,"ax",%progbits
 598              		.align	1
 599              		.global	str_split
 600              		.syntax unified
 601              		.code	16
 602              		.thumb_func
 603              		.fpu softvfp
 605              	str_split:
 606              	.LFB43:
 398:Src/main.c    **** 
 399:Src/main.c    **** char **str_split(char *a_str, const char a_delim)
 400:Src/main.c    **** {
 607              		.loc 1 400 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 8
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL46:
 612 0000 70B5     		push	{r4, r5, r6, lr}
 613              	.LCFI9:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 20


 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 82B0     		sub	sp, sp, #8
 620              	.LCFI10:
 621              		.cfi_def_cfa_offset 24
 622 0004 0500     		movs	r5, r0
 623              	.LVL47:
 401:Src/main.c    ****   char **result = 0;
 402:Src/main.c    ****   size_t count = 0;
 403:Src/main.c    ****   char *tmp = a_str;
 404:Src/main.c    ****   char *last_delim = 0;
 405:Src/main.c    ****   char delim[2];
 406:Src/main.c    ****   delim[0] = a_delim;
 624              		.loc 1 406 0
 625 0006 01AB     		add	r3, sp, #4
 626 0008 1970     		strb	r1, [r3]
 407:Src/main.c    ****   delim[1] = 0;
 627              		.loc 1 407 0
 628 000a 0022     		movs	r2, #0
 629 000c 5A70     		strb	r2, [r3, #1]
 403:Src/main.c    ****   char *last_delim = 0;
 630              		.loc 1 403 0
 631 000e 0300     		movs	r3, r0
 404:Src/main.c    ****   char delim[2];
 632              		.loc 1 404 0
 633 0010 0024     		movs	r4, #0
 402:Src/main.c    ****   char *tmp = a_str;
 634              		.loc 1 402 0
 635 0012 0026     		movs	r6, #0
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* Count how many elements will be extracted. */
 410:Src/main.c    ****   while (*tmp)
 636              		.loc 1 410 0
 637 0014 00E0     		b	.L37
 638              	.LVL48:
 639              	.L38:
 411:Src/main.c    ****   {
 412:Src/main.c    ****     if (a_delim == *tmp)
 413:Src/main.c    ****     {
 414:Src/main.c    ****       count++;
 415:Src/main.c    ****       last_delim = tmp;
 416:Src/main.c    ****     }
 417:Src/main.c    ****     tmp++;
 640              		.loc 1 417 0
 641 0016 0133     		adds	r3, r3, #1
 642              	.LVL49:
 643              	.L37:
 410:Src/main.c    ****   {
 644              		.loc 1 410 0
 645 0018 1A78     		ldrb	r2, [r3]
 646 001a 002A     		cmp	r2, #0
 647 001c 04D0     		beq	.L43
 412:Src/main.c    ****     {
 648              		.loc 1 412 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 21


 649 001e 8A42     		cmp	r2, r1
 650 0020 F9D1     		bne	.L38
 414:Src/main.c    ****       last_delim = tmp;
 651              		.loc 1 414 0
 652 0022 0136     		adds	r6, r6, #1
 653              	.LVL50:
 415:Src/main.c    ****     }
 654              		.loc 1 415 0
 655 0024 1C00     		movs	r4, r3
 656 0026 F6E7     		b	.L38
 657              	.LVL51:
 658              	.L43:
 418:Src/main.c    ****   }
 419:Src/main.c    **** 
 420:Src/main.c    ****   /* Add space for trailing token. */
 421:Src/main.c    ****   count += last_delim < (a_str + strlen(a_str) - 1);
 659              		.loc 1 421 0
 660 0028 2800     		movs	r0, r5
 661              	.LVL52:
 662 002a FFF7FEFF 		bl	strlen
 663              	.LVL53:
 664 002e 0138     		subs	r0, r0, #1
 665 0030 2818     		adds	r0, r5, r0
 666 0032 8442     		cmp	r4, r0
 667 0034 8041     		sbcs	r0, r0, r0
 668 0036 4042     		rsbs	r0, r0, #0
 669 0038 8019     		adds	r0, r0, r6
 670              	.LVL54:
 422:Src/main.c    **** 
 423:Src/main.c    ****   /* Add space for terminating null string so caller
 424:Src/main.c    ****        knows where the list of returned strings ends. */
 425:Src/main.c    ****   count++;
 671              		.loc 1 425 0
 672 003a 0130     		adds	r0, r0, #1
 673              	.LVL55:
 426:Src/main.c    **** 
 427:Src/main.c    ****   result = malloc(sizeof(char *) * count);
 674              		.loc 1 427 0
 675 003c 8000     		lsls	r0, r0, #2
 676              	.LVL56:
 677 003e FFF7FEFF 		bl	malloc
 678              	.LVL57:
 679 0042 061E     		subs	r6, r0, #0
 680              	.LVL58:
 428:Src/main.c    **** 
 429:Src/main.c    ****   if (result)
 681              		.loc 1 429 0
 682 0044 16D0     		beq	.L36
 683              	.LVL59:
 684              	.LBB7:
 430:Src/main.c    ****   {
 431:Src/main.c    ****     size_t idx = 0;
 432:Src/main.c    ****     char *token = strtok(a_str, delim);
 685              		.loc 1 432 0
 686 0046 01A9     		add	r1, sp, #4
 687 0048 2800     		movs	r0, r5
 688              	.LVL60:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 22


 689 004a FFF7FEFF 		bl	strtok
 690              	.LVL61:
 431:Src/main.c    ****     char *token = strtok(a_str, delim);
 691              		.loc 1 431 0
 692 004e 0023     		movs	r3, #0
 433:Src/main.c    **** 
 434:Src/main.c    ****     while (token)
 693              		.loc 1 434 0
 694 0050 0AE0     		b	.L41
 695              	.LVL62:
 696              	.L42:
 435:Src/main.c    ****     {
 436:Src/main.c    ****       *(result + idx++) = strdup(token);
 697              		.loc 1 436 0
 698 0052 5D1C     		adds	r5, r3, #1
 699              	.LVL63:
 700 0054 9B00     		lsls	r3, r3, #2
 701 0056 F418     		adds	r4, r6, r3
 702 0058 FFF7FEFF 		bl	strdup
 703              	.LVL64:
 704 005c 2060     		str	r0, [r4]
 437:Src/main.c    ****       token = strtok(0, delim);
 705              		.loc 1 437 0
 706 005e 01A9     		add	r1, sp, #4
 707 0060 0020     		movs	r0, #0
 708 0062 FFF7FEFF 		bl	strtok
 709              	.LVL65:
 436:Src/main.c    ****       token = strtok(0, delim);
 710              		.loc 1 436 0
 711 0066 2B00     		movs	r3, r5
 712              	.LVL66:
 713              	.L41:
 434:Src/main.c    ****     {
 714              		.loc 1 434 0
 715 0068 0028     		cmp	r0, #0
 716 006a F2D1     		bne	.L42
 438:Src/main.c    ****     }
 439:Src/main.c    ****     *(result + idx) = 0;
 717              		.loc 1 439 0
 718 006c 9B00     		lsls	r3, r3, #2
 719              	.LVL67:
 720 006e F318     		adds	r3, r6, r3
 721 0070 0022     		movs	r2, #0
 722 0072 1A60     		str	r2, [r3]
 723              	.LVL68:
 724              	.L36:
 725              	.LBE7:
 440:Src/main.c    ****   }
 441:Src/main.c    **** 
 442:Src/main.c    ****   return result;
 443:Src/main.c    **** }
 726              		.loc 1 443 0
 727 0074 3000     		movs	r0, r6
 728 0076 02B0     		add	sp, sp, #8
 729              		@ sp needed
 730              	.LVL69:
 731 0078 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 23


 732              		.cfi_endproc
 733              	.LFE43:
 735              		.section	.text.Error_Handler,"ax",%progbits
 736              		.align	1
 737              		.global	Error_Handler
 738              		.syntax unified
 739              		.code	16
 740              		.thumb_func
 741              		.fpu softvfp
 743              	Error_Handler:
 744              	.LFB44:
 444:Src/main.c    **** 
 445:Src/main.c    **** /* USER CODE END 4 */
 446:Src/main.c    **** 
 447:Src/main.c    **** /**
 448:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 449:Src/main.c    ****   * @retval None
 450:Src/main.c    ****   */
 451:Src/main.c    **** void Error_Handler(void)
 452:Src/main.c    **** {
 745              		.loc 1 452 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              		@ link register save eliminated.
 453:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 454:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 455:Src/main.c    **** 
 456:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 457:Src/main.c    **** }
 750              		.loc 1 457 0
 751              		@ sp needed
 752 0000 7047     		bx	lr
 753              		.cfi_endproc
 754              	.LFE44:
 756              		.global	str_deveui
 757              		.global	txBuff
 758              		.comm	huart2,128,4
 759              		.comm	hi2c1,76,4
 760              		.section	.bss.str_deveui,"aw",%nobits
 761              		.align	2
 764              	str_deveui:
 765 0000 00000000 		.space	24
 765      00000000 
 765      00000000 
 765      00000000 
 765      00000000 
 766              		.section	.bss.txBuff,"aw",%nobits
 767              		.align	2
 770              	txBuff:
 771 0000 00000000 		.space	200
 771      00000000 
 771      00000000 
 771      00000000 
 771      00000000 
 772              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 773              		.align	2
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 24


 774              	.LC3:
 775 0000 3D3D3D3D 		.ascii	"==== ######\000"
 775      20232323 
 775      23232300 
 776              	.LC5:
 777 000c 0D0A0D0A 		.ascii	"\015\012\015\012\000"
 777      00
 778 0011 000000   		.space	3
 779              	.LC7:
 780 0014 0D0A00   		.ascii	"\015\012\000"
 781              		.text
 782              	.Letext0:
 783              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 784              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 785              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 786              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 787              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eabi
 788              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 789              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 790              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 791              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 792              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 793              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h"
 794              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 795              		.file 14 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 796              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 797              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 798              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 799              		.file 18 "Drivers/BSP/STM32L0XX_Nucleo_32/stm32l0xx_nucleo_32.h"
 800              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 801              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 802              		.file 21 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 803              		.file 22 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h"
 804              		.file 23 "<built-in>"
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:16     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:107    .text.MX_GPIO_Init:00000064 $d
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:113    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:119    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:165    .text.MX_USART2_UART_Init:00000028 $d
                            *COM*:00000080 huart2
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:171    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:177    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:237    .text.MX_I2C1_Init:00000040 $d
                            *COM*:0000004c hi2c1
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:244    .text.isDevEui:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:250    .text.isDevEui:00000000 isDevEui
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:328    .text.SystemClock_Config:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:335    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:437    .text.SystemClock_Config:00000080 $d
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:443    .text.main:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:450    .text.main:00000000 main
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:589    .text.main:000000b4 $d
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:770    .bss.txBuff:00000000 txBuff
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:598    .text.str_split:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:605    .text.str_split:00000000 str_split
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:736    .text.Error_Handler:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:743    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:764    .bss.str_deveui:00000000 str_deveui
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:761    .bss.str_deveui:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:767    .bss.txBuff:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s:773    .rodata.main.str1.4:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_I2CEx_EnableFastModePlus
strlen
__locale_ctype_ptr
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
BSP_LED_Init
BSP_LED_Off
strcmp
memcpy
HAL_UART_Transmit_IT
BSP_LED_On
HAL_UART_Receive_IT
strcat
malloc
strtok
strdup
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\cc2R0C45.s 			page 26


