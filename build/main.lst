ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB41:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** #include <string.h>
  48:Src/main.c    **** #include <stdbool.h>
  49:Src/main.c    **** #include <stdio.h>
  50:Src/main.c    **** #include <stm32l0xx_nucleo_32.h>
  51:Src/main.c    **** #include <stdlib.h>
  52:Src/main.c    **** #include <ctype.h>
  53:Src/main.c    **** #include <stdint.h>
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  58:Src/main.c    **** /* USER CODE BEGIN PTD */
  59:Src/main.c    **** 
  60:Src/main.c    **** typedef struct
  61:Src/main.c    **** {
  62:Src/main.c    ****   uint8_t *const buffer;
  63:Src/main.c    ****   int head;
  64:Src/main.c    ****   int tail;
  65:Src/main.c    ****   const int maxlen;
  66:Src/main.c    **** } circ_bbuf_t;
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PTD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PD */
  72:Src/main.c    **** 
  73:Src/main.c    **** //taille buffer circulaire
  74:Src/main.c    **** #define CIRC_BUFFER_MAX_SIZE    1024
  75:Src/main.c    **** 
  76:Src/main.c    **** //si l'on utilise un ou plusieurs ports uart
  77:Src/main.c    **** #define USE_MULTIPLE_UART 0
  78:Src/main.c    **** 
  79:Src/main.c    **** //nombre de port uart connect√©s
  80:Src/main.c    **** #define MAX_UART_PORT 2
  81:Src/main.c    **** 
  82:Src/main.c    **** #define I2C_ADDRESS 0x08
  83:Src/main.c    **** 
  84:Src/main.c    **** // Macro Switches
  85:Src/main.c    **** 
  86:Src/main.c    **** // uncomment to zero element space in XX_circ_gbuf_data after a pop.
  87:Src/main.c    **** // #define CRICBUF_CLEAN_ON_POP
  88:Src/main.c    **** 
  89:Src/main.c    **** /*!
  90:Src/main.c    ****  * @brief   Define init macro
  91:Src/main.c    ****  * @param   x   circular buffer label
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 3


  92:Src/main.c    ****  * @param   y   circulaire buffer size
  93:Src/main.c    ****  */
  94:Src/main.c    **** #define CIRC_BBUF_DEF(x, y)      \
  95:Src/main.c    ****   uint8_t x##_data_space[y + 1]; \
  96:Src/main.c    ****   circ_bbuf_t x = {              \
  97:Src/main.c    ****       .buffer = x##_data_space,  \
  98:Src/main.c    ****       .head = 0,                 \
  99:Src/main.c    ****       .tail = 0,                 \
 100:Src/main.c    ****       .maxlen = y + 1}
 101:Src/main.c    **** 
 102:Src/main.c    **** /*!
 103:Src/main.c    ****  *  Reset the buffer to 0
 104:Src/main.c    ****  */
 105:Src/main.c    **** #define CIRC_BBUF_RESET(x) \
 106:Src/main.c    ****   do                       \
 107:Src/main.c    ****   {                        \
 108:Src/main.c    ****     x.head = 0;            \
 109:Src/main.c    ****     x.tail = 0;            \
 110:Src/main.c    ****   } while (0)
 111:Src/main.c    **** 
 112:Src/main.c    **** /* USER CODE END PD */
 113:Src/main.c    **** 
 114:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 115:Src/main.c    **** /* USER CODE BEGIN PM */
 116:Src/main.c    **** 
 117:Src/main.c    **** /* USER CODE END PM */
 118:Src/main.c    **** 
 119:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 120:Src/main.c    **** I2C_HandleTypeDef hi2c1;
 121:Src/main.c    **** 
 122:Src/main.c    **** UART_HandleTypeDef huart2;
 123:Src/main.c    **** 
 124:Src/main.c    **** /* USER CODE BEGIN PV */
 125:Src/main.c    **** 
 126:Src/main.c    **** //Init circular buffer
 127:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 128:Src/main.c    **** CIRC_BBUF_DEF(cbuf1, CIRC_BUFFER_MAX_SIZE);    // un buffer circulaire pour chaque port uart
 129:Src/main.c    **** CIRC_BBUF_DEF(cbuf2, CIRC_BUFFER_MAX_SIZE);
 130:Src/main.c    **** #else
 131:Src/main.c    **** CIRC_BBUF_DEF(cbuf, CIRC_BUFFER_MAX_SIZE);
 132:Src/main.c    **** #endif
 133:Src/main.c    **** 
 134:Src/main.c    **** uint8_t rxBuff = 0;
 135:Src/main.c    **** 
 136:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 137:Src/main.c    **** UART_HandleTypeDef *uart_table[MAX_UART_PORT] = {
 138:Src/main.c    ****     0,
 139:Src/main.c    ****     &huart2};
 140:Src/main.c    **** 
 141:Src/main.c    **** circ_bbuf_t *bbuf_table[MAX_UART_PORT] = {
 142:Src/main.c    ****   &cbuf1,
 143:Src/main.c    ****   &cbuf2
 144:Src/main.c    **** };
 145:Src/main.c    **** 
 146:Src/main.c    **** #endif
 147:Src/main.c    **** 
 148:Src/main.c    **** uint8_t uartPort = 2;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    **** /* USER CODE END PV */
 151:Src/main.c    **** 
 152:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 153:Src/main.c    **** void SystemClock_Config(void);
 154:Src/main.c    **** static void MX_GPIO_Init(void);
 155:Src/main.c    **** static void MX_USART2_UART_Init(void);
 156:Src/main.c    **** static void MX_I2C1_Init(void);
 157:Src/main.c    **** /* USER CODE BEGIN PFP */
 158:Src/main.c    **** 
 159:Src/main.c    **** 
 160:Src/main.c    **** 
 161:Src/main.c    **** //Circular buffer functions
 162:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data);
 163:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data);
 164:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c);
 165:Src/main.c    **** 
 166:Src/main.c    **** /* USER CODE END PFP */
 167:Src/main.c    **** 
 168:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 169:Src/main.c    **** /* USER CODE BEGIN 0 */
 170:Src/main.c    **** 
 171:Src/main.c    **** /* USER CODE END 0 */
 172:Src/main.c    **** 
 173:Src/main.c    **** /**
 174:Src/main.c    ****   * @brief  The application entry point.
 175:Src/main.c    ****   * @retval int
 176:Src/main.c    ****   */
 177:Src/main.c    **** int main(void)
 178:Src/main.c    **** {
 179:Src/main.c    ****   /* USER CODE BEGIN 1 */
 180:Src/main.c    **** 
 181:Src/main.c    ****   /* USER CODE END 1 */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 186:Src/main.c    ****   HAL_Init();
 187:Src/main.c    **** 
 188:Src/main.c    ****   /* USER CODE BEGIN Init */
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* USER CODE END Init */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* Configure the system clock */
 193:Src/main.c    ****   SystemClock_Config();
 194:Src/main.c    **** 
 195:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE END SysInit */
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* Initialize all configured peripherals */
 200:Src/main.c    ****   MX_GPIO_Init();
 201:Src/main.c    ****   MX_USART2_UART_Init();
 202:Src/main.c    ****   MX_I2C1_Init();
 203:Src/main.c    ****   /* USER CODE BEGIN 2 */
 204:Src/main.c    **** 
 205:Src/main.c    ****   BSP_LED_Init(LED3);
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   BSP_LED_Off(LED3);
 208:Src/main.c    ****   
 209:Src/main.c    ****   uint8_t bf = 0;
 210:Src/main.c    **** 
 211:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 212:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff, 1);
 213:Src/main.c    ****   /*mettre toutes les fonctions d'interupt*/
 214:Src/main.c    **** #else
 215:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff, 1);
 216:Src/main.c    **** #endif
 217:Src/main.c    ****   /* USER CODE END 2 */
 218:Src/main.c    **** 
 219:Src/main.c    ****   /* Infinite loop */
 220:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 221:Src/main.c    ****   while (1)
 222:Src/main.c    ****   {
 223:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 224:Src/main.c    ****       if(circ_bbuf_pop(bbuf_table[uartPort-1], &bf) != -1)
 225:Src/main.c    **** #else
 226:Src/main.c    ****       if(circ_bbuf_pop(&cbuf, &bf) != -1)
 227:Src/main.c    **** #endif
 228:Src/main.c    ****       {
 229:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 230:Src/main.c    ****         if(bf == '\r')
 231:Src/main.c    ****         {
 232:Src/main.c    ****           if(uartPort == 4)
 233:Src/main.c    ****           {
 234:Src/main.c    ****             uartPort = 1;
 235:Src/main.c    ****           }
 236:Src/main.c    ****           else
 237:Src/main.c    ****           {
 238:Src/main.c    ****             uartPort++;
 239:Src/main.c    ****           }
 240:Src/main.c    ****         }
 241:Src/main.c    **** #endif    
 242:Src/main.c    **** 
 243:Src/main.c    ****         if (HAL_I2C_Slave_Transmit(&hi2c1, &bf, 1, 0xFF) != HAL_OK)
 244:Src/main.c    ****         {
 245:Src/main.c    ****           BSP_LED_On(LED3);
 246:Src/main.c    ****         }
 247:Src/main.c    **** 
 248:Src/main.c    ****       }
 249:Src/main.c    ****     
 250:Src/main.c    ****     /* USER CODE END WHILE */
 251:Src/main.c    **** 
 252:Src/main.c    ****     /* USER CODE BEGIN 3 */
 253:Src/main.c    ****   }
 254:Src/main.c    ****   /* USER CODE END 3 */
 255:Src/main.c    **** }
 256:Src/main.c    **** 
 257:Src/main.c    **** /**
 258:Src/main.c    ****   * @brief System Clock Configuration
 259:Src/main.c    ****   * @retval None
 260:Src/main.c    ****   */
 261:Src/main.c    **** void SystemClock_Config(void)
 262:Src/main.c    **** {
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 6


 263:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 264:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 266:Src/main.c    **** 
 267:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 268:Src/main.c    ****   */
 269:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 270:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 271:Src/main.c    ****   */
 272:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 273:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 274:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 275:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 276:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 277:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 278:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 279:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 280:Src/main.c    ****   {
 281:Src/main.c    ****     Error_Handler();
 282:Src/main.c    ****   }
 283:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 284:Src/main.c    ****   */
 285:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 286:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 287:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 288:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 289:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 290:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 291:Src/main.c    **** 
 292:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 293:Src/main.c    ****   {
 294:Src/main.c    ****     Error_Handler();
 295:Src/main.c    ****   }
 296:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 297:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 298:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 299:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 300:Src/main.c    ****   {
 301:Src/main.c    ****     Error_Handler();
 302:Src/main.c    ****   }
 303:Src/main.c    **** }
 304:Src/main.c    **** 
 305:Src/main.c    **** /**
 306:Src/main.c    ****   * @brief I2C1 Initialization Function
 307:Src/main.c    ****   * @param None
 308:Src/main.c    ****   * @retval None
 309:Src/main.c    ****   */
 310:Src/main.c    **** static void MX_I2C1_Init(void)
 311:Src/main.c    **** {
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 316:Src/main.c    **** 
 317:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 318:Src/main.c    **** 
 319:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 7


 320:Src/main.c    ****   hi2c1.Instance = I2C1;
 321:Src/main.c    ****   hi2c1.Init.Timing = 0x00100713;
 322:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 323:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 324:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 325:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 326:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 327:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 328:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 329:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 330:Src/main.c    ****   {
 331:Src/main.c    ****     Error_Handler();
 332:Src/main.c    ****   }
 333:Src/main.c    ****   /**Configure Analogue filter 
 334:Src/main.c    ****   */
 335:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 336:Src/main.c    ****   {
 337:Src/main.c    ****     Error_Handler();
 338:Src/main.c    ****   }
 339:Src/main.c    ****   /**Configure Digital filter 
 340:Src/main.c    ****   */
 341:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 342:Src/main.c    ****   {
 343:Src/main.c    ****     Error_Handler();
 344:Src/main.c    ****   }
 345:Src/main.c    ****   /**I2C Fast mode Plus enable 
 346:Src/main.c    ****   */
 347:Src/main.c    ****   HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 348:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 349:Src/main.c    **** 
 350:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 351:Src/main.c    **** 
 352:Src/main.c    **** }
 353:Src/main.c    **** 
 354:Src/main.c    **** /**
 355:Src/main.c    ****   * @brief USART2 Initialization Function
 356:Src/main.c    ****   * @param None
 357:Src/main.c    ****   * @retval None
 358:Src/main.c    ****   */
 359:Src/main.c    **** static void MX_USART2_UART_Init(void)
 360:Src/main.c    **** {
 361:Src/main.c    **** 
 362:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 363:Src/main.c    **** 
 364:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 365:Src/main.c    **** 
 366:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 367:Src/main.c    **** 
 368:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 369:Src/main.c    ****   huart2.Instance = USART2;
 370:Src/main.c    ****   huart2.Init.BaudRate = 115200 ;
 371:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 372:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 373:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 374:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 375:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 376:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 8


 377:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 378:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 379:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 380:Src/main.c    ****   {
 381:Src/main.c    ****     Error_Handler();
 382:Src/main.c    ****   }
 383:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 386:Src/main.c    **** 
 387:Src/main.c    **** }
 388:Src/main.c    **** 
 389:Src/main.c    **** /**
 390:Src/main.c    ****   * @brief GPIO Initialization Function
 391:Src/main.c    ****   * @param None
 392:Src/main.c    ****   * @retval None
 393:Src/main.c    ****   */
 394:Src/main.c    **** static void MX_GPIO_Init(void)
 395:Src/main.c    **** {
  25              		.loc 1 395 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 396:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 396 0
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 03A8     		add	r0, sp, #12
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB2:
 397:Src/main.c    **** 
 398:Src/main.c    ****   /* GPIO Ports Clock Enable */
 399:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 399 0
  46 000e 154B     		ldr	r3, .L2
  47 0010 D96A     		ldr	r1, [r3, #44]
  48 0012 0422     		movs	r2, #4
  49 0014 1143     		orrs	r1, r2
  50 0016 D962     		str	r1, [r3, #44]
  51 0018 D96A     		ldr	r1, [r3, #44]
  52 001a 0A40     		ands	r2, r1
  53 001c 0092     		str	r2, [sp]
  54 001e 009A     		ldr	r2, [sp]
  55              	.LBE2:
  56              	.LBB3:
 400:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 400 0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 9


  58 0020 DA6A     		ldr	r2, [r3, #44]
  59 0022 0124     		movs	r4, #1
  60 0024 2243     		orrs	r2, r4
  61 0026 DA62     		str	r2, [r3, #44]
  62 0028 DA6A     		ldr	r2, [r3, #44]
  63 002a 2240     		ands	r2, r4
  64 002c 0192     		str	r2, [sp, #4]
  65 002e 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
 401:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  68              		.loc 1 401 0
  69 0030 D96A     		ldr	r1, [r3, #44]
  70 0032 0222     		movs	r2, #2
  71 0034 1143     		orrs	r1, r2
  72 0036 D962     		str	r1, [r3, #44]
  73 0038 DB6A     		ldr	r3, [r3, #44]
  74 003a 1A40     		ands	r2, r3
  75 003c 0292     		str	r2, [sp, #8]
  76 003e 029B     		ldr	r3, [sp, #8]
  77              	.LBE4:
 402:Src/main.c    **** 
 403:Src/main.c    ****   /*Configure GPIO pin Output Level */
 404:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  78              		.loc 1 404 0
  79 0040 094D     		ldr	r5, .L2+4
  80 0042 0022     		movs	r2, #0
  81 0044 0821     		movs	r1, #8
  82 0046 2800     		movs	r0, r5
  83 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL1:
 405:Src/main.c    **** 
 406:Src/main.c    ****   /*Configure GPIO pin : PB3 */
 407:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
  85              		.loc 1 407 0
  86 004c 0823     		movs	r3, #8
  87 004e 0393     		str	r3, [sp, #12]
 408:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 408 0
  89 0050 0494     		str	r4, [sp, #16]
 409:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  90              		.loc 1 409 0
  91 0052 0023     		movs	r3, #0
  92 0054 0593     		str	r3, [sp, #20]
 410:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  93              		.loc 1 410 0
  94 0056 0693     		str	r3, [sp, #24]
 411:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  95              		.loc 1 411 0
  96 0058 03A9     		add	r1, sp, #12
  97 005a 2800     		movs	r0, r5
  98 005c FFF7FEFF 		bl	HAL_GPIO_Init
  99              	.LVL2:
 412:Src/main.c    **** 
 413:Src/main.c    **** }
 100              		.loc 1 413 0
 101 0060 09B0     		add	sp, sp, #36
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 10


 102              		@ sp needed
 103 0062 30BD     		pop	{r4, r5, pc}
 104              	.L3:
 105              		.align	2
 106              	.L2:
 107 0064 00100240 		.word	1073876992
 108 0068 00040050 		.word	1342178304
 109              		.cfi_endproc
 110              	.LFE41:
 112              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.code	16
 116              		.thumb_func
 117              		.fpu softvfp
 119              	MX_USART2_UART_Init:
 120              	.LFB40:
 360:Src/main.c    **** 
 121              		.loc 1 360 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
 369:Src/main.c    ****   huart2.Init.BaudRate = 115200 ;
 130              		.loc 1 369 0
 131 0002 0948     		ldr	r0, .L5
 132 0004 094B     		ldr	r3, .L5+4
 133 0006 0360     		str	r3, [r0]
 370:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 134              		.loc 1 370 0
 135 0008 E123     		movs	r3, #225
 136 000a 5B02     		lsls	r3, r3, #9
 137 000c 4360     		str	r3, [r0, #4]
 371:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 138              		.loc 1 371 0
 139 000e 0023     		movs	r3, #0
 140 0010 8360     		str	r3, [r0, #8]
 372:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 141              		.loc 1 372 0
 142 0012 C360     		str	r3, [r0, #12]
 373:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 143              		.loc 1 373 0
 144 0014 0361     		str	r3, [r0, #16]
 374:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 145              		.loc 1 374 0
 146 0016 0C22     		movs	r2, #12
 147 0018 4261     		str	r2, [r0, #20]
 375:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 148              		.loc 1 375 0
 149 001a 8361     		str	r3, [r0, #24]
 376:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 150              		.loc 1 376 0
 151 001c C361     		str	r3, [r0, #28]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 11


 377:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 152              		.loc 1 377 0
 153 001e 0362     		str	r3, [r0, #32]
 378:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 154              		.loc 1 378 0
 155 0020 4362     		str	r3, [r0, #36]
 379:Src/main.c    ****   {
 156              		.loc 1 379 0
 157 0022 FFF7FEFF 		bl	HAL_UART_Init
 158              	.LVL3:
 387:Src/main.c    **** 
 159              		.loc 1 387 0
 160              		@ sp needed
 161 0026 10BD     		pop	{r4, pc}
 162              	.L6:
 163              		.align	2
 164              	.L5:
 165 0028 00000000 		.word	huart2
 166 002c 00440040 		.word	1073759232
 167              		.cfi_endproc
 168              	.LFE40:
 170              		.section	.text.MX_I2C1_Init,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.code	16
 174              		.thumb_func
 175              		.fpu softvfp
 177              	MX_I2C1_Init:
 178              	.LFB39:
 311:Src/main.c    **** 
 179              		.loc 1 311 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 10B5     		push	{r4, lr}
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 4, -8
 187              		.cfi_offset 14, -4
 320:Src/main.c    ****   hi2c1.Init.Timing = 0x00100713;
 188              		.loc 1 320 0
 189 0002 0F4C     		ldr	r4, .L8
 190 0004 0F4B     		ldr	r3, .L8+4
 191 0006 2360     		str	r3, [r4]
 321:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 192              		.loc 1 321 0
 193 0008 0F4B     		ldr	r3, .L8+8
 194 000a 6360     		str	r3, [r4, #4]
 322:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 195              		.loc 1 322 0
 196 000c 1023     		movs	r3, #16
 197 000e A360     		str	r3, [r4, #8]
 323:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 198              		.loc 1 323 0
 199 0010 0F3B     		subs	r3, r3, #15
 200 0012 E360     		str	r3, [r4, #12]
 324:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 12


 201              		.loc 1 324 0
 202 0014 0023     		movs	r3, #0
 203 0016 2361     		str	r3, [r4, #16]
 325:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 204              		.loc 1 325 0
 205 0018 6361     		str	r3, [r4, #20]
 326:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 206              		.loc 1 326 0
 207 001a A361     		str	r3, [r4, #24]
 327:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 208              		.loc 1 327 0
 209 001c E361     		str	r3, [r4, #28]
 328:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 210              		.loc 1 328 0
 211 001e 2362     		str	r3, [r4, #32]
 329:Src/main.c    ****   {
 212              		.loc 1 329 0
 213 0020 2000     		movs	r0, r4
 214 0022 FFF7FEFF 		bl	HAL_I2C_Init
 215              	.LVL4:
 335:Src/main.c    ****   {
 216              		.loc 1 335 0
 217 0026 0021     		movs	r1, #0
 218 0028 2000     		movs	r0, r4
 219 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 220              	.LVL5:
 341:Src/main.c    ****   {
 221              		.loc 1 341 0
 222 002e 0021     		movs	r1, #0
 223 0030 2000     		movs	r0, r4
 224 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 225              	.LVL6:
 347:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 226              		.loc 1 347 0
 227 0036 8020     		movs	r0, #128
 228 0038 4001     		lsls	r0, r0, #5
 229 003a FFF7FEFF 		bl	HAL_I2CEx_EnableFastModePlus
 230              	.LVL7:
 352:Src/main.c    **** 
 231              		.loc 1 352 0
 232              		@ sp needed
 233 003e 10BD     		pop	{r4, pc}
 234              	.L9:
 235              		.align	2
 236              	.L8:
 237 0040 00000000 		.word	hi2c1
 238 0044 00540040 		.word	1073763328
 239 0048 13071000 		.word	1050387
 240              		.cfi_endproc
 241              	.LFE39:
 243              		.section	.text.SystemClock_Config,"ax",%progbits
 244              		.align	1
 245              		.global	SystemClock_Config
 246              		.syntax unified
 247              		.code	16
 248              		.thumb_func
 249              		.fpu softvfp
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 13


 251              	SystemClock_Config:
 252              	.LFB38:
 262:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 253              		.loc 1 262 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 96
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0000 10B5     		push	{r4, lr}
 258              	.LCFI4:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 4, -8
 261              		.cfi_offset 14, -4
 262 0002 98B0     		sub	sp, sp, #96
 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 104
 263:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265              		.loc 1 263 0
 266 0004 3422     		movs	r2, #52
 267 0006 0021     		movs	r1, #0
 268 0008 0BA8     		add	r0, sp, #44
 269 000a FFF7FEFF 		bl	memset
 270              	.LVL8:
 264:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 271              		.loc 1 264 0
 272 000e 1422     		movs	r2, #20
 273 0010 0021     		movs	r1, #0
 274 0012 06A8     		add	r0, sp, #24
 275 0014 FFF7FEFF 		bl	memset
 276              	.LVL9:
 265:Src/main.c    **** 
 277              		.loc 1 265 0
 278 0018 1822     		movs	r2, #24
 279 001a 0021     		movs	r1, #0
 280 001c 6846     		mov	r0, sp
 281 001e FFF7FEFF 		bl	memset
 282              	.LVL10:
 269:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 283              		.loc 1 269 0
 284 0022 1749     		ldr	r1, .L11
 285 0024 0B68     		ldr	r3, [r1]
 286 0026 174A     		ldr	r2, .L11+4
 287 0028 1A40     		ands	r2, r3
 288 002a 8023     		movs	r3, #128
 289 002c 1B01     		lsls	r3, r3, #4
 290 002e 1343     		orrs	r3, r2
 291 0030 0B60     		str	r3, [r1]
 272:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 292              		.loc 1 272 0
 293 0032 0223     		movs	r3, #2
 294 0034 0B93     		str	r3, [sp, #44]
 273:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 295              		.loc 1 273 0
 296 0036 0122     		movs	r2, #1
 297 0038 0E92     		str	r2, [sp, #56]
 274:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 298              		.loc 1 274 0
 299 003a 0F32     		adds	r2, r2, #15
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 14


 300 003c 0F92     		str	r2, [sp, #60]
 275:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 301              		.loc 1 275 0
 302 003e 1493     		str	r3, [sp, #80]
 276:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 303              		.loc 1 276 0
 304 0040 0024     		movs	r4, #0
 305 0042 1594     		str	r4, [sp, #84]
 277:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 306              		.loc 1 277 0
 307 0044 8023     		movs	r3, #128
 308 0046 DB02     		lsls	r3, r3, #11
 309 0048 1693     		str	r3, [sp, #88]
 278:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 310              		.loc 1 278 0
 311 004a 8023     		movs	r3, #128
 312 004c DB03     		lsls	r3, r3, #15
 313 004e 1793     		str	r3, [sp, #92]
 279:Src/main.c    ****   {
 314              		.loc 1 279 0
 315 0050 0BA8     		add	r0, sp, #44
 316 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 317              	.LVL11:
 285:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 318              		.loc 1 285 0
 319 0056 0F23     		movs	r3, #15
 320 0058 0693     		str	r3, [sp, #24]
 287:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 321              		.loc 1 287 0
 322 005a 0C3B     		subs	r3, r3, #12
 323 005c 0793     		str	r3, [sp, #28]
 288:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 324              		.loc 1 288 0
 325 005e 0894     		str	r4, [sp, #32]
 289:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 326              		.loc 1 289 0
 327 0060 0994     		str	r4, [sp, #36]
 290:Src/main.c    **** 
 328              		.loc 1 290 0
 329 0062 0A94     		str	r4, [sp, #40]
 292:Src/main.c    ****   {
 330              		.loc 1 292 0
 331 0064 0121     		movs	r1, #1
 332 0066 06A8     		add	r0, sp, #24
 333 0068 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 334              	.LVL12:
 296:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 335              		.loc 1 296 0
 336 006c 0A23     		movs	r3, #10
 337 006e 0093     		str	r3, [sp]
 297:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 338              		.loc 1 297 0
 339 0070 0294     		str	r4, [sp, #8]
 298:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 340              		.loc 1 298 0
 341 0072 0494     		str	r4, [sp, #16]
 299:Src/main.c    ****   {
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 15


 342              		.loc 1 299 0
 343 0074 6846     		mov	r0, sp
 344 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 345              	.LVL13:
 303:Src/main.c    **** 
 346              		.loc 1 303 0
 347 007a 18B0     		add	sp, sp, #96
 348              		@ sp needed
 349 007c 10BD     		pop	{r4, pc}
 350              	.L12:
 351 007e C046     		.align	2
 352              	.L11:
 353 0080 00700040 		.word	1073770496
 354 0084 FFE7FFFF 		.word	-6145
 355              		.cfi_endproc
 356              	.LFE38:
 358              		.section	.text.circ_bbuf_push,"ax",%progbits
 359              		.align	1
 360              		.global	circ_bbuf_push
 361              		.syntax unified
 362              		.code	16
 363              		.thumb_func
 364              		.fpu softvfp
 366              	circ_bbuf_push:
 367              	.LFB42:
 414:Src/main.c    **** 
 415:Src/main.c    **** /* USER CODE BEGIN 4 */
 416:Src/main.c    **** 
 417:Src/main.c    **** /*!
 418:Src/main.c    ****  * @brief   Permet de mettre une valeur dans le buffer circulaire
 419:Src/main.c    ****  * @param   c           circular buffer address
 420:Src/main.c    ****  * @param   data        donn√©es √† mettre dans le buffer circulaire
 421:Src/main.c    ****  * @retval  int         0 - Success
 422:Src/main.c    ****  *                     -1 - Out of space
 423:Src/main.c    ****  */
 424:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data)
 425:Src/main.c    **** {
 368              		.loc 1 425 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372              	.LVL14:
 373 0000 10B5     		push	{r4, lr}
 374              	.LCFI6:
 375              		.cfi_def_cfa_offset 8
 376              		.cfi_offset 4, -8
 377              		.cfi_offset 14, -4
 426:Src/main.c    ****   int next;
 427:Src/main.c    **** 
 428:Src/main.c    ****   next = c->head + 1; // next is where head will point to after this write.
 378              		.loc 1 428 0
 379 0002 4268     		ldr	r2, [r0, #4]
 380 0004 531C     		adds	r3, r2, #1
 381              	.LVL15:
 429:Src/main.c    ****   if (next >= c->maxlen)
 382              		.loc 1 429 0
 383 0006 C468     		ldr	r4, [r0, #12]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 16


 384 0008 9C42     		cmp	r4, r3
 385 000a 00DC     		bgt	.L14
 430:Src/main.c    ****     next = 0;
 386              		.loc 1 430 0
 387 000c 0023     		movs	r3, #0
 388              	.LVL16:
 389              	.L14:
 431:Src/main.c    **** 
 432:Src/main.c    ****   // if the head + 1 == tail, circular buffer is full. Notice that one slot
 433:Src/main.c    ****   // is always left empty to differentiate empty vs full condition
 434:Src/main.c    ****   if (next == c->tail)
 390              		.loc 1 434 0
 391 000e 8468     		ldr	r4, [r0, #8]
 392 0010 9C42     		cmp	r4, r3
 393 0012 04D0     		beq	.L17
 435:Src/main.c    ****     return -1;
 436:Src/main.c    **** 
 437:Src/main.c    ****   c->buffer[c->head] = data; // Load data and then move
 394              		.loc 1 437 0
 395 0014 0468     		ldr	r4, [r0]
 396 0016 A154     		strb	r1, [r4, r2]
 438:Src/main.c    ****   c->head = next;            // head to next data offset.
 397              		.loc 1 438 0
 398 0018 4360     		str	r3, [r0, #4]
 439:Src/main.c    ****   return 0;                  // return success to indicate successful push.
 399              		.loc 1 439 0
 400 001a 0020     		movs	r0, #0
 401              	.LVL17:
 402              	.L13:
 440:Src/main.c    **** }
 403              		.loc 1 440 0
 404              		@ sp needed
 405 001c 10BD     		pop	{r4, pc}
 406              	.LVL18:
 407              	.L17:
 435:Src/main.c    **** 
 408              		.loc 1 435 0
 409 001e 0120     		movs	r0, #1
 410              	.LVL19:
 411 0020 4042     		rsbs	r0, r0, #0
 412 0022 FBE7     		b	.L13
 413              		.cfi_endproc
 414              	.LFE42:
 416              		.section	.text.circ_bbuf_pop,"ax",%progbits
 417              		.align	1
 418              		.global	circ_bbuf_pop
 419              		.syntax unified
 420              		.code	16
 421              		.thumb_func
 422              		.fpu softvfp
 424              	circ_bbuf_pop:
 425              	.LFB43:
 441:Src/main.c    **** 
 442:Src/main.c    **** /*!
 443:Src/main.c    ****  * @brief   Permet de r√©cup√©rer la valeur √† lire dans le buffer circulaire
 444:Src/main.c    ****  * @param   c           circular buffer address
 445:Src/main.c    ****  * @param   data        variable pour acceuillir la valeur pop
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 17


 446:Src/main.c    ****  * @retval  int         0 - Success
 447:Src/main.c    ****  *                     -1 - Empty
 448:Src/main.c    ****  */
 449:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data)
 450:Src/main.c    **** {
 426              		.loc 1 450 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL20:
 431 0000 10B5     		push	{r4, lr}
 432              	.LCFI7:
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 4, -8
 435              		.cfi_offset 14, -4
 451:Src/main.c    ****   int next;
 452:Src/main.c    **** 
 453:Src/main.c    ****   if (c->head == c->tail) // if the head == tail, we don't have any data
 436              		.loc 1 453 0
 437 0002 8368     		ldr	r3, [r0, #8]
 438 0004 4268     		ldr	r2, [r0, #4]
 439 0006 9A42     		cmp	r2, r3
 440 0008 0AD0     		beq	.L21
 454:Src/main.c    ****     return -1;
 455:Src/main.c    **** 
 456:Src/main.c    ****   next = c->tail + 1; // next is where tail will point to after this read.
 441              		.loc 1 456 0
 442 000a 5A1C     		adds	r2, r3, #1
 443              	.LVL21:
 457:Src/main.c    ****   if (next >= c->maxlen)
 444              		.loc 1 457 0
 445 000c C468     		ldr	r4, [r0, #12]
 446 000e 9442     		cmp	r4, r2
 447 0010 00DC     		bgt	.L20
 458:Src/main.c    ****     next = 0;
 448              		.loc 1 458 0
 449 0012 0022     		movs	r2, #0
 450              	.LVL22:
 451              	.L20:
 459:Src/main.c    **** 
 460:Src/main.c    ****   *data = c->buffer[c->tail]; // Read data and then move
 452              		.loc 1 460 0
 453 0014 0468     		ldr	r4, [r0]
 454 0016 E35C     		ldrb	r3, [r4, r3]
 455 0018 0B70     		strb	r3, [r1]
 461:Src/main.c    ****   c->tail = next;             // tail to next offset.
 456              		.loc 1 461 0
 457 001a 8260     		str	r2, [r0, #8]
 462:Src/main.c    ****   return 0;                   // return success to indicate successful push.
 458              		.loc 1 462 0
 459 001c 0020     		movs	r0, #0
 460              	.LVL23:
 461              	.L18:
 463:Src/main.c    **** }
 462              		.loc 1 463 0
 463              		@ sp needed
 464 001e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 18


 465              	.LVL24:
 466              	.L21:
 454:Src/main.c    **** 
 467              		.loc 1 454 0
 468 0020 0120     		movs	r0, #1
 469              	.LVL25:
 470 0022 4042     		rsbs	r0, r0, #0
 471 0024 FBE7     		b	.L18
 472              		.cfi_endproc
 473              	.LFE43:
 475              		.section	.text.main,"ax",%progbits
 476              		.align	1
 477              		.global	main
 478              		.syntax unified
 479              		.code	16
 480              		.thumb_func
 481              		.fpu softvfp
 483              	main:
 484              	.LFB37:
 178:Src/main.c    ****   /* USER CODE BEGIN 1 */
 485              		.loc 1 178 0
 486              		.cfi_startproc
 487              		@ Volatile: function does not return.
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490 0000 00B5     		push	{lr}
 491              	.LCFI8:
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 14, -4
 494 0002 83B0     		sub	sp, sp, #12
 495              	.LCFI9:
 496              		.cfi_def_cfa_offset 16
 186:Src/main.c    **** 
 497              		.loc 1 186 0
 498 0004 FFF7FEFF 		bl	HAL_Init
 499              	.LVL26:
 193:Src/main.c    **** 
 500              		.loc 1 193 0
 501 0008 FFF7FEFF 		bl	SystemClock_Config
 502              	.LVL27:
 200:Src/main.c    ****   MX_USART2_UART_Init();
 503              		.loc 1 200 0
 504 000c FFF7FEFF 		bl	MX_GPIO_Init
 505              	.LVL28:
 201:Src/main.c    ****   MX_I2C1_Init();
 506              		.loc 1 201 0
 507 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 508              	.LVL29:
 202:Src/main.c    ****   /* USER CODE BEGIN 2 */
 509              		.loc 1 202 0
 510 0014 FFF7FEFF 		bl	MX_I2C1_Init
 511              	.LVL30:
 205:Src/main.c    **** 
 512              		.loc 1 205 0
 513 0018 0020     		movs	r0, #0
 514 001a FFF7FEFF 		bl	BSP_LED_Init
 515              	.LVL31:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 19


 207:Src/main.c    ****   
 516              		.loc 1 207 0
 517 001e 0020     		movs	r0, #0
 518 0020 FFF7FEFF 		bl	BSP_LED_Off
 519              	.LVL32:
 209:Src/main.c    **** 
 520              		.loc 1 209 0
 521 0024 6B46     		mov	r3, sp
 522 0026 0022     		movs	r2, #0
 523 0028 DA71     		strb	r2, [r3, #7]
 215:Src/main.c    **** #endif
 524              		.loc 1 215 0
 525 002a 0132     		adds	r2, r2, #1
 526 002c 0B49     		ldr	r1, .L27
 527 002e 0C48     		ldr	r0, .L27+4
 528 0030 FFF7FEFF 		bl	HAL_UART_Receive_IT
 529              	.LVL33:
 530              	.L24:
 226:Src/main.c    **** #endif
 531              		.loc 1 226 0
 532 0034 6B46     		mov	r3, sp
 533 0036 D91D     		adds	r1, r3, #7
 534 0038 0A48     		ldr	r0, .L27+8
 535 003a FFF7FEFF 		bl	circ_bbuf_pop
 536              	.LVL34:
 537 003e 431C     		adds	r3, r0, #1
 538 0040 F8D0     		beq	.L24
 243:Src/main.c    ****         {
 539              		.loc 1 243 0
 540 0042 FF23     		movs	r3, #255
 541 0044 0122     		movs	r2, #1
 542 0046 6946     		mov	r1, sp
 543 0048 0731     		adds	r1, r1, #7
 544 004a 0748     		ldr	r0, .L27+12
 545 004c FFF7FEFF 		bl	HAL_I2C_Slave_Transmit
 546              	.LVL35:
 547 0050 0028     		cmp	r0, #0
 548 0052 EFD0     		beq	.L24
 245:Src/main.c    ****         }
 549              		.loc 1 245 0
 550 0054 0020     		movs	r0, #0
 551 0056 FFF7FEFF 		bl	BSP_LED_On
 552              	.LVL36:
 553 005a EBE7     		b	.L24
 554              	.L28:
 555              		.align	2
 556              	.L27:
 557 005c 00000000 		.word	.LANCHOR0
 558 0060 00000000 		.word	huart2
 559 0064 00000000 		.word	.LANCHOR1
 560 0068 00000000 		.word	hi2c1
 561              		.cfi_endproc
 562              	.LFE37:
 564              		.section	.text.circ_bbuf_free_space,"ax",%progbits
 565              		.align	1
 566              		.global	circ_bbuf_free_space
 567              		.syntax unified
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 20


 568              		.code	16
 569              		.thumb_func
 570              		.fpu softvfp
 572              	circ_bbuf_free_space:
 573              	.LFB44:
 464:Src/main.c    **** 
 465:Src/main.c    **** /*!
 466:Src/main.c    ****  * @brief   Permet de r√©cup√©rer la taille de l'espace libre dans le buffer circulaire
 467:Src/main.c    ****  * @param   c           circular buffer address
 468:Src/main.c    ****  * @retval  int         number of bytes available
 469:Src/main.c    ****  */
 470:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c)
 471:Src/main.c    **** {
 574              		.loc 1 471 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579              	.LVL37:
 472:Src/main.c    ****   int freeSpace;
 473:Src/main.c    ****   freeSpace = c->tail - c->head;
 580              		.loc 1 473 0
 581 0000 8368     		ldr	r3, [r0, #8]
 582 0002 4268     		ldr	r2, [r0, #4]
 583 0004 9B1A     		subs	r3, r3, r2
 584              	.LVL38:
 474:Src/main.c    ****   if (freeSpace <= 0)
 585              		.loc 1 474 0
 586 0006 002B     		cmp	r3, #0
 587 0008 01DD     		ble	.L31
 588              	.L30:
 475:Src/main.c    ****     freeSpace += c->maxlen;
 476:Src/main.c    ****   return freeSpace - 1; // -1 to account for the always-empty slot.
 589              		.loc 1 476 0
 590 000a 581E     		subs	r0, r3, #1
 591              	.LVL39:
 477:Src/main.c    **** }
 592              		.loc 1 477 0
 593              		@ sp needed
 594 000c 7047     		bx	lr
 595              	.LVL40:
 596              	.L31:
 475:Src/main.c    ****     freeSpace += c->maxlen;
 597              		.loc 1 475 0
 598 000e C268     		ldr	r2, [r0, #12]
 599 0010 9B18     		adds	r3, r3, r2
 600              	.LVL41:
 601 0012 FAE7     		b	.L30
 602              		.cfi_endproc
 603              	.LFE44:
 605              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 606              		.align	1
 607              		.global	HAL_UART_RxCpltCallback
 608              		.syntax unified
 609              		.code	16
 610              		.thumb_func
 611              		.fpu softvfp
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 21


 613              	HAL_UART_RxCpltCallback:
 614              	.LFB45:
 478:Src/main.c    **** 
 479:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 480:Src/main.c    **** {
 615              		.loc 1 480 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              	.LVL42:
 620 0000 10B5     		push	{r4, lr}
 621              	.LCFI10:
 622              		.cfi_def_cfa_offset 8
 623              		.cfi_offset 4, -8
 624              		.cfi_offset 14, -4
 481:Src/main.c    **** /*if ( circ_bbuf_free_space(&cbuf) > 0)
 482:Src/main.c    ****   {
 483:Src/main.c    **** 
 484:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 485:Src/main.c    ****     if(HAL_UART_Receive_IT(uart_table[uartPort-1], &rxBuff, 1) == HAL_OK)
 486:Src/main.c    **** #else
 487:Src/main.c    ****     if(HAL_UART_Receive_IT(&huart2, &rxBuff, 1) == HAL_OK)
 488:Src/main.c    **** #endif
 489:Src/main.c    ****     {
 490:Src/main.c    **** 
 491:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 492:Src/main.c    ****       circ_bbuf_push(bbuf_table[uartPort-1], rxBuff);
 493:Src/main.c    **** #else
 494:Src/main.c    ****  */circ_bbuf_push(&cbuf, rxBuff);
 625              		.loc 1 494 0
 626 0002 054C     		ldr	r4, .L33
 627 0004 2178     		ldrb	r1, [r4]
 628 0006 0548     		ldr	r0, .L33+4
 629              	.LVL43:
 630 0008 FFF7FEFF 		bl	circ_bbuf_push
 631              	.LVL44:
 495:Src/main.c    **** /*#endif
 496:Src/main.c    ****     }
 497:Src/main.c    **** 
 498:Src/main.c    ****   } */
 499:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &rxBuff, 1);
 632              		.loc 1 499 0
 633 000c 0122     		movs	r2, #1
 634 000e 2100     		movs	r1, r4
 635 0010 0348     		ldr	r0, .L33+8
 636 0012 FFF7FEFF 		bl	HAL_UART_Receive_IT
 637              	.LVL45:
 500:Src/main.c    **** }
 638              		.loc 1 500 0
 639              		@ sp needed
 640 0016 10BD     		pop	{r4, pc}
 641              	.L34:
 642              		.align	2
 643              	.L33:
 644 0018 00000000 		.word	.LANCHOR0
 645 001c 00000000 		.word	.LANCHOR1
 646 0020 00000000 		.word	huart2
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 22


 647              		.cfi_endproc
 648              	.LFE45:
 650              		.section	.text.Error_Handler,"ax",%progbits
 651              		.align	1
 652              		.global	Error_Handler
 653              		.syntax unified
 654              		.code	16
 655              		.thumb_func
 656              		.fpu softvfp
 658              	Error_Handler:
 659              	.LFB46:
 501:Src/main.c    **** 
 502:Src/main.c    **** /* USER CODE END 4 */
 503:Src/main.c    **** 
 504:Src/main.c    **** /**
 505:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 506:Src/main.c    ****   * @retval None
 507:Src/main.c    ****   */
 508:Src/main.c    **** void Error_Handler(void)
 509:Src/main.c    **** {
 660              		.loc 1 509 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 510:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 511:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 512:Src/main.c    **** 
 513:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 514:Src/main.c    **** }
 665              		.loc 1 514 0
 666              		@ sp needed
 667 0000 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE46:
 671              		.global	uartPort
 672              		.global	rxBuff
 673              		.global	cbuf
 674              		.comm	cbuf_data_space,1025,4
 675              		.comm	huart2,128,4
 676              		.comm	hi2c1,76,4
 677              		.section	.bss.rxBuff,"aw",%nobits
 678              		.set	.LANCHOR0,. + 0
 681              	rxBuff:
 682 0000 00       		.space	1
 683              		.section	.data.cbuf,"aw",%progbits
 684              		.align	2
 685              		.set	.LANCHOR1,. + 0
 688              	cbuf:
 689 0000 00000000 		.word	cbuf_data_space
 690 0004 00000000 		.word	0
 691 0008 00000000 		.word	0
 692 000c 01040000 		.word	1025
 693              		.section	.data.uartPort,"aw",%progbits
 696              	uartPort:
 697 0000 02       		.byte	2
 698              		.text
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 23


 699              	.Letext0:
 700              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 701              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 702              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 703              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 704              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 705              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 706              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 707              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 708              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 709              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h"
 710              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 711              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 712              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 713              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 714              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 715              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 716              		.file 18 "Drivers/BSP/STM32L0XX_Nucleo_32/stm32l0xx_nucleo_32.h"
 717              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 718              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 719              		.file 21 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h"
 720              		.file 22 "<built-in>"
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s 			page 24


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:16     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:107    .text.MX_GPIO_Init:00000064 $d
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:113    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:119    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:165    .text.MX_USART2_UART_Init:00000028 $d
                            *COM*:00000080 huart2
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:171    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:177    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:237    .text.MX_I2C1_Init:00000040 $d
                            *COM*:0000004c hi2c1
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:244    .text.SystemClock_Config:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:251    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:353    .text.SystemClock_Config:00000080 $d
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:359    .text.circ_bbuf_push:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:366    .text.circ_bbuf_push:00000000 circ_bbuf_push
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:417    .text.circ_bbuf_pop:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:424    .text.circ_bbuf_pop:00000000 circ_bbuf_pop
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:476    .text.main:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:483    .text.main:00000000 main
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:557    .text.main:0000005c $d
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:565    .text.circ_bbuf_free_space:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:572    .text.circ_bbuf_free_space:00000000 circ_bbuf_free_space
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:606    .text.HAL_UART_RxCpltCallback:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:613    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:644    .text.HAL_UART_RxCpltCallback:00000018 $d
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:651    .text.Error_Handler:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:658    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:696    .data.uartPort:00000000 uartPort
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:681    .bss.rxBuff:00000000 rxBuff
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:688    .data.cbuf:00000000 cbuf
                            *COM*:00000401 cbuf_data_space
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:682    .bss.rxBuff:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccUD7AvN.s:684    .data.cbuf:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_I2CEx_EnableFastModePlus
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
BSP_LED_Init
BSP_LED_Off
HAL_UART_Receive_IT
HAL_I2C_Slave_Transmit
BSP_LED_On
