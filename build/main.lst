ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB41:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   ** This notice applies to any and all portions of this file
   8:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   9:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
  10:Src/main.c    ****   * inserted by the user or by software development tools
  11:Src/main.c    ****   * are owned by their respective copyright owners.
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * COPYRIGHT(c) 2019 STMicroelectronics
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Src/main.c    ****   * are permitted provided that the following conditions are met:
  17:Src/main.c    ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Src/main.c    ****   *      this list of conditions and the following disclaimer.
  19:Src/main.c    ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Src/main.c    ****   *      this list of conditions and the following disclaimer in the documentation
  21:Src/main.c    ****   *      and/or other materials provided with the distribution.
  22:Src/main.c    ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Src/main.c    ****   *      may be used to endorse or promote products derived from this software
  24:Src/main.c    ****   *      without specific prior written permission.
  25:Src/main.c    ****   *
  26:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Src/main.c    ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Src/main.c    ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Src/main.c    ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Src/main.c    ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Src/main.c    ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Src/main.c    ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Src/main.c    ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  34:Src/main.c    ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 2


  35:Src/main.c    ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Src/main.c    ****   *
  37:Src/main.c    ****   ******************************************************************************
  38:Src/main.c    ****   */
  39:Src/main.c    **** /* USER CODE END Header */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  42:Src/main.c    **** #include "main.h"
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN Includes */
  46:Src/main.c    **** 
  47:Src/main.c    **** #include <string.h>
  48:Src/main.c    **** #include <stdbool.h>
  49:Src/main.c    **** #include <stdio.h>
  50:Src/main.c    **** #include <stm32l0xx_nucleo_32.h>
  51:Src/main.c    **** #include <stdlib.h>
  52:Src/main.c    **** #include <ctype.h>
  53:Src/main.c    **** #include <stdint.h>
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  58:Src/main.c    **** /* USER CODE BEGIN PTD */
  59:Src/main.c    **** 
  60:Src/main.c    **** typedef struct
  61:Src/main.c    **** {
  62:Src/main.c    ****   uint8_t *const buffer;
  63:Src/main.c    ****   int head;
  64:Src/main.c    ****   int tail;
  65:Src/main.c    ****   const int maxlen;
  66:Src/main.c    **** } circ_bbuf_t;
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE END PTD */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  71:Src/main.c    **** /* USER CODE BEGIN PD */
  72:Src/main.c    **** 
  73:Src/main.c    **** //taille du buffer d'émission
  74:Src/main.c    **** #define TXBUFFERSIZE 140
  75:Src/main.c    **** 
  76:Src/main.c    **** //taille buffer circulaire
  77:Src/main.c    **** #define CIRC_BUFFER_MAX_SIZE    1024
  78:Src/main.c    **** 
  79:Src/main.c    **** //si l'on utilise un ou plusieurs ports uart
  80:Src/main.c    **** #define USE_MULTIPLE_UART 0
  81:Src/main.c    **** 
  82:Src/main.c    **** //mettre à zero si l'on veut faire des tests avec l'UART par exemple
  83:Src/main.c    **** #define USE_I2C 1
  84:Src/main.c    **** 
  85:Src/main.c    **** //nombre de port uart connectés
  86:Src/main.c    **** #define MAX_UART_PORT 2
  87:Src/main.c    **** 
  88:Src/main.c    **** #define I2C_ADDRESS 0x08
  89:Src/main.c    **** 
  90:Src/main.c    **** // Macro Switches
  91:Src/main.c    **** 
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 3


  92:Src/main.c    **** // uncomment to zero element space in XX_circ_gbuf_data after a pop.
  93:Src/main.c    **** // #define CRICBUF_CLEAN_ON_POP
  94:Src/main.c    **** 
  95:Src/main.c    **** /*!
  96:Src/main.c    ****  * @brief   Define init macro
  97:Src/main.c    ****  * @param   x   circular buffer label
  98:Src/main.c    ****  * @param   y   circulaire buffer size
  99:Src/main.c    ****  */
 100:Src/main.c    **** #define CIRC_BBUF_DEF(x, y)      \
 101:Src/main.c    ****   uint8_t x##_data_space[y + 1]; \
 102:Src/main.c    ****   circ_bbuf_t x = {              \
 103:Src/main.c    ****       .buffer = x##_data_space,  \
 104:Src/main.c    ****       .head = 0,                 \
 105:Src/main.c    ****       .tail = 0,                 \
 106:Src/main.c    ****       .maxlen = y + 1}
 107:Src/main.c    **** 
 108:Src/main.c    **** /*!
 109:Src/main.c    ****  *  Reset the buffer to 0
 110:Src/main.c    ****  */
 111:Src/main.c    **** #define CIRC_GBUF_RESET(x) \
 112:Src/main.c    ****   do                       \
 113:Src/main.c    ****   {                        \
 114:Src/main.c    ****     x.head = 0;            \
 115:Src/main.c    ****     x.tail = 0;            \
 116:Src/main.c    ****   } while (0)
 117:Src/main.c    **** 
 118:Src/main.c    **** /* USER CODE END PD */
 119:Src/main.c    **** 
 120:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
 121:Src/main.c    **** /* USER CODE BEGIN PM */
 122:Src/main.c    **** 
 123:Src/main.c    **** /* USER CODE END PM */
 124:Src/main.c    **** 
 125:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
 126:Src/main.c    **** I2C_HandleTypeDef hi2c1;
 127:Src/main.c    **** 
 128:Src/main.c    **** UART_HandleTypeDef huart2;
 129:Src/main.c    **** 
 130:Src/main.c    **** /* USER CODE BEGIN PV */
 131:Src/main.c    **** 
 132:Src/main.c    **** //Init circular buffer
 133:Src/main.c    **** CIRC_BBUF_DEF(cbuf, CIRC_BUFFER_MAX_SIZE);
 134:Src/main.c    **** 
 135:Src/main.c    **** uint8_t txBuff = 0;
 136:Src/main.c    **** uint8_t rxBuff[2] = {NULL};
 137:Src/main.c    **** 
 138:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 139:Src/main.c    **** uint8_t deveui_table[MAX_UART_PORT][8] = {0};
 140:Src/main.c    **** #else
 141:Src/main.c    **** uint8_t devEui[8] = {0};
 142:Src/main.c    **** #endif
 143:Src/main.c    **** 
 144:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 145:Src/main.c    **** UART_HandleTypeDef *uart_table[MAX_UART_PORT] = {
 146:Src/main.c    ****     0,
 147:Src/main.c    ****     &huart2};
 148:Src/main.c    **** #endif
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 4


 149:Src/main.c    **** 
 150:Src/main.c    **** uint8_t uartPort = 2;
 151:Src/main.c    **** 
 152:Src/main.c    **** /* USER CODE END PV */
 153:Src/main.c    **** 
 154:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 155:Src/main.c    **** void SystemClock_Config(void);
 156:Src/main.c    **** static void MX_GPIO_Init(void);
 157:Src/main.c    **** static void MX_USART2_UART_Init(void);
 158:Src/main.c    **** static void MX_I2C1_Init(void);
 159:Src/main.c    **** /* USER CODE BEGIN PFP */
 160:Src/main.c    **** 
 161:Src/main.c    **** 
 162:Src/main.c    **** 
 163:Src/main.c    **** //Circular buffer functions
 164:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data);
 165:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data);
 166:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c);
 167:Src/main.c    **** 
 168:Src/main.c    **** /* USER CODE END PFP */
 169:Src/main.c    **** 
 170:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 171:Src/main.c    **** /* USER CODE BEGIN 0 */
 172:Src/main.c    **** 
 173:Src/main.c    **** /* USER CODE END 0 */
 174:Src/main.c    **** 
 175:Src/main.c    **** /**
 176:Src/main.c    ****   * @brief  The application entry point.
 177:Src/main.c    ****   * @retval int
 178:Src/main.c    ****   */
 179:Src/main.c    **** int main(void)
 180:Src/main.c    **** {
 181:Src/main.c    ****   /* USER CODE BEGIN 1 */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* USER CODE END 1 */
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 186:Src/main.c    **** 
 187:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 188:Src/main.c    ****   HAL_Init();
 189:Src/main.c    **** 
 190:Src/main.c    ****   /* USER CODE BEGIN Init */
 191:Src/main.c    **** 
 192:Src/main.c    ****   /* USER CODE END Init */
 193:Src/main.c    **** 
 194:Src/main.c    ****   /* Configure the system clock */
 195:Src/main.c    ****   SystemClock_Config();
 196:Src/main.c    **** 
 197:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 198:Src/main.c    **** 
 199:Src/main.c    ****   /* USER CODE END SysInit */
 200:Src/main.c    **** 
 201:Src/main.c    ****   /* Initialize all configured peripherals */
 202:Src/main.c    ****   MX_GPIO_Init();
 203:Src/main.c    ****   MX_USART2_UART_Init();
 204:Src/main.c    ****   MX_I2C1_Init();
 205:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 5


 206:Src/main.c    **** 
 207:Src/main.c    ****   BSP_LED_Init(LED3);
 208:Src/main.c    **** 
 209:Src/main.c    ****   BSP_LED_Off(LED3);
 210:Src/main.c    **** 
 211:Src/main.c    ****   uint8_t cpybf[10] = {0};
 212:Src/main.c    **** 
 213:Src/main.c    ****   bool first = true;
 214:Src/main.c    **** 
 215:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &txBuff, 1);
 216:Src/main.c    **** 
 217:Src/main.c    ****   /* USER CODE END 2 */
 218:Src/main.c    **** 
 219:Src/main.c    ****   /* Infinite loop */
 220:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 221:Src/main.c    ****   while (1)
 222:Src/main.c    ****   {
 223:Src/main.c    **** /*
 224:Src/main.c    ****     if(circ_bbuf_pop(&cbuf, &txBuff) != -1)
 225:Src/main.c    ****     {
 226:Src/main.c    ****       if (HAL_I2C_Slave_Transmit_IT(&hi2c1, &txBuff, 1) != HAL_OK)
 227:Src/main.c    ****       {
 228:Src/main.c    ****         BSP_LED_On(LED3);
 229:Src/main.c    ****       }
 230:Src/main.c    ****       
 231:Src/main.c    ****       while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 232:Src/main.c    ****       {
 233:Src/main.c    ****       }
 234:Src/main.c    ****     }
 235:Src/main.c    **** */
 236:Src/main.c    **** 
 237:Src/main.c    ****     /* USER CODE END WHILE */
 238:Src/main.c    **** 
 239:Src/main.c    ****     /* USER CODE BEGIN 3 */
 240:Src/main.c    ****   }
 241:Src/main.c    ****   /* USER CODE END 3 */
 242:Src/main.c    **** }
 243:Src/main.c    **** 
 244:Src/main.c    **** /**
 245:Src/main.c    ****   * @brief System Clock Configuration
 246:Src/main.c    ****   * @retval None
 247:Src/main.c    ****   */
 248:Src/main.c    **** void SystemClock_Config(void)
 249:Src/main.c    **** {
 250:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 251:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 252:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 253:Src/main.c    **** 
 254:Src/main.c    ****   /**Configure the main internal regulator output voltage 
 255:Src/main.c    ****   */
 256:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 257:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 258:Src/main.c    ****   */
 259:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 260:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 261:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 6


 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 265:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 266:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 267:Src/main.c    ****   {
 268:Src/main.c    ****     Error_Handler();
 269:Src/main.c    ****   }
 270:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 271:Src/main.c    ****   */
 272:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 273:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 274:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 275:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 276:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 277:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 278:Src/main.c    **** 
 279:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 280:Src/main.c    ****   {
 281:Src/main.c    ****     Error_Handler();
 282:Src/main.c    ****   }
 283:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 284:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 285:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 286:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 287:Src/main.c    ****   {
 288:Src/main.c    ****     Error_Handler();
 289:Src/main.c    ****   }
 290:Src/main.c    **** }
 291:Src/main.c    **** 
 292:Src/main.c    **** /**
 293:Src/main.c    ****   * @brief I2C1 Initialization Function
 294:Src/main.c    ****   * @param None
 295:Src/main.c    ****   * @retval None
 296:Src/main.c    ****   */
 297:Src/main.c    **** static void MX_I2C1_Init(void)
 298:Src/main.c    **** {
 299:Src/main.c    **** 
 300:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 0 */
 301:Src/main.c    **** 
 302:Src/main.c    ****   /* USER CODE END I2C1_Init 0 */
 303:Src/main.c    **** 
 304:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 1 */
 305:Src/main.c    **** 
 306:Src/main.c    ****   /* USER CODE END I2C1_Init 1 */
 307:Src/main.c    ****   hi2c1.Instance = I2C1;
 308:Src/main.c    ****   hi2c1.Init.Timing = 0x00100413;
 309:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 310:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 311:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 312:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 313:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 314:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 315:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 316:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 317:Src/main.c    ****   {
 318:Src/main.c    ****     Error_Handler();
 319:Src/main.c    ****   }
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 7


 320:Src/main.c    ****   /**Configure Analogue filter 
 321:Src/main.c    ****   */
 322:Src/main.c    ****   if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 323:Src/main.c    ****   {
 324:Src/main.c    ****     Error_Handler();
 325:Src/main.c    ****   }
 326:Src/main.c    ****   /**Configure Digital filter 
 327:Src/main.c    ****   */
 328:Src/main.c    ****   if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 329:Src/main.c    ****   {
 330:Src/main.c    ****     Error_Handler();
 331:Src/main.c    ****   }
 332:Src/main.c    ****   /**I2C Fast mode Plus enable 
 333:Src/main.c    ****   */
 334:Src/main.c    ****   HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 335:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 336:Src/main.c    **** 
 337:Src/main.c    ****   /* USER CODE END I2C1_Init 2 */
 338:Src/main.c    **** 
 339:Src/main.c    **** }
 340:Src/main.c    **** 
 341:Src/main.c    **** /**
 342:Src/main.c    ****   * @brief USART2 Initialization Function
 343:Src/main.c    ****   * @param None
 344:Src/main.c    ****   * @retval None
 345:Src/main.c    ****   */
 346:Src/main.c    **** static void MX_USART2_UART_Init(void)
 347:Src/main.c    **** {
 348:Src/main.c    **** 
 349:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 350:Src/main.c    **** 
 351:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 356:Src/main.c    ****   huart2.Instance = USART2;
 357:Src/main.c    ****   huart2.Init.BaudRate = 96000;
 358:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 359:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 360:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 361:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 362:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 363:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 364:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 365:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 366:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 367:Src/main.c    ****   {
 368:Src/main.c    ****     Error_Handler();
 369:Src/main.c    ****   }
 370:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 371:Src/main.c    **** 
 372:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 373:Src/main.c    **** 
 374:Src/main.c    **** }
 375:Src/main.c    **** 
 376:Src/main.c    **** /**
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 8


 377:Src/main.c    ****   * @brief GPIO Initialization Function
 378:Src/main.c    ****   * @param None
 379:Src/main.c    ****   * @retval None
 380:Src/main.c    ****   */
 381:Src/main.c    **** static void MX_GPIO_Init(void)
 382:Src/main.c    **** {
  25              		.loc 1 382 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 383:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 383 0
  39 0004 1422     		movs	r2, #20
  40 0006 0021     		movs	r1, #0
  41 0008 03A8     		add	r0, sp, #12
  42 000a FFF7FEFF 		bl	memset
  43              	.LVL0:
  44              	.LBB2:
 384:Src/main.c    **** 
 385:Src/main.c    ****   /* GPIO Ports Clock Enable */
 386:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 386 0
  46 000e 154B     		ldr	r3, .L2
  47 0010 D96A     		ldr	r1, [r3, #44]
  48 0012 0422     		movs	r2, #4
  49 0014 1143     		orrs	r1, r2
  50 0016 D962     		str	r1, [r3, #44]
  51 0018 D96A     		ldr	r1, [r3, #44]
  52 001a 0A40     		ands	r2, r1
  53 001c 0092     		str	r2, [sp]
  54 001e 009A     		ldr	r2, [sp]
  55              	.LBE2:
  56              	.LBB3:
 387:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 387 0
  58 0020 DA6A     		ldr	r2, [r3, #44]
  59 0022 0124     		movs	r4, #1
  60 0024 2243     		orrs	r2, r4
  61 0026 DA62     		str	r2, [r3, #44]
  62 0028 DA6A     		ldr	r2, [r3, #44]
  63 002a 2240     		ands	r2, r4
  64 002c 0192     		str	r2, [sp, #4]
  65 002e 019A     		ldr	r2, [sp, #4]
  66              	.LBE3:
  67              	.LBB4:
 388:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  68              		.loc 1 388 0
  69 0030 D96A     		ldr	r1, [r3, #44]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 9


  70 0032 0222     		movs	r2, #2
  71 0034 1143     		orrs	r1, r2
  72 0036 D962     		str	r1, [r3, #44]
  73 0038 DB6A     		ldr	r3, [r3, #44]
  74 003a 1A40     		ands	r2, r3
  75 003c 0292     		str	r2, [sp, #8]
  76 003e 029B     		ldr	r3, [sp, #8]
  77              	.LBE4:
 389:Src/main.c    **** 
 390:Src/main.c    ****   /*Configure GPIO pin Output Level */
 391:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
  78              		.loc 1 391 0
  79 0040 094D     		ldr	r5, .L2+4
  80 0042 0022     		movs	r2, #0
  81 0044 0821     		movs	r1, #8
  82 0046 2800     		movs	r0, r5
  83 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
  84              	.LVL1:
 392:Src/main.c    **** 
 393:Src/main.c    ****   /*Configure GPIO pin : PB3 */
 394:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
  85              		.loc 1 394 0
  86 004c 0823     		movs	r3, #8
  87 004e 0393     		str	r3, [sp, #12]
 395:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  88              		.loc 1 395 0
  89 0050 0494     		str	r4, [sp, #16]
 396:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  90              		.loc 1 396 0
  91 0052 0023     		movs	r3, #0
  92 0054 0593     		str	r3, [sp, #20]
 397:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  93              		.loc 1 397 0
  94 0056 0693     		str	r3, [sp, #24]
 398:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  95              		.loc 1 398 0
  96 0058 03A9     		add	r1, sp, #12
  97 005a 2800     		movs	r0, r5
  98 005c FFF7FEFF 		bl	HAL_GPIO_Init
  99              	.LVL2:
 399:Src/main.c    **** 
 400:Src/main.c    **** }
 100              		.loc 1 400 0
 101 0060 09B0     		add	sp, sp, #36
 102              		@ sp needed
 103 0062 30BD     		pop	{r4, r5, pc}
 104              	.L3:
 105              		.align	2
 106              	.L2:
 107 0064 00100240 		.word	1073876992
 108 0068 00040050 		.word	1342178304
 109              		.cfi_endproc
 110              	.LFE41:
 112              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 113              		.align	1
 114              		.syntax unified
 115              		.code	16
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 10


 116              		.thumb_func
 117              		.fpu softvfp
 119              	MX_USART2_UART_Init:
 120              	.LFB40:
 347:Src/main.c    **** 
 121              		.loc 1 347 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125 0000 10B5     		push	{r4, lr}
 126              	.LCFI2:
 127              		.cfi_def_cfa_offset 8
 128              		.cfi_offset 4, -8
 129              		.cfi_offset 14, -4
 356:Src/main.c    ****   huart2.Init.BaudRate = 96000;
 130              		.loc 1 356 0
 131 0002 0948     		ldr	r0, .L5
 132 0004 094B     		ldr	r3, .L5+4
 133 0006 0360     		str	r3, [r0]
 357:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 134              		.loc 1 357 0
 135 0008 094B     		ldr	r3, .L5+8
 136 000a 4360     		str	r3, [r0, #4]
 358:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 137              		.loc 1 358 0
 138 000c 0023     		movs	r3, #0
 139 000e 8360     		str	r3, [r0, #8]
 359:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 140              		.loc 1 359 0
 141 0010 C360     		str	r3, [r0, #12]
 360:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 142              		.loc 1 360 0
 143 0012 0361     		str	r3, [r0, #16]
 361:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 144              		.loc 1 361 0
 145 0014 0C22     		movs	r2, #12
 146 0016 4261     		str	r2, [r0, #20]
 362:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 147              		.loc 1 362 0
 148 0018 8361     		str	r3, [r0, #24]
 363:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 149              		.loc 1 363 0
 150 001a C361     		str	r3, [r0, #28]
 364:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 151              		.loc 1 364 0
 152 001c 0362     		str	r3, [r0, #32]
 365:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 153              		.loc 1 365 0
 154 001e 4362     		str	r3, [r0, #36]
 366:Src/main.c    ****   {
 155              		.loc 1 366 0
 156 0020 FFF7FEFF 		bl	HAL_UART_Init
 157              	.LVL3:
 374:Src/main.c    **** 
 158              		.loc 1 374 0
 159              		@ sp needed
 160 0024 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 11


 161              	.L6:
 162 0026 C046     		.align	2
 163              	.L5:
 164 0028 00000000 		.word	huart2
 165 002c 00440040 		.word	1073759232
 166 0030 00770100 		.word	96000
 167              		.cfi_endproc
 168              	.LFE40:
 170              		.section	.text.MX_I2C1_Init,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.code	16
 174              		.thumb_func
 175              		.fpu softvfp
 177              	MX_I2C1_Init:
 178              	.LFB39:
 298:Src/main.c    **** 
 179              		.loc 1 298 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183 0000 10B5     		push	{r4, lr}
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 4, -8
 187              		.cfi_offset 14, -4
 307:Src/main.c    ****   hi2c1.Init.Timing = 0x00100413;
 188              		.loc 1 307 0
 189 0002 0F4C     		ldr	r4, .L8
 190 0004 0F4B     		ldr	r3, .L8+4
 191 0006 2360     		str	r3, [r4]
 308:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 16;
 192              		.loc 1 308 0
 193 0008 0F4B     		ldr	r3, .L8+8
 194 000a 6360     		str	r3, [r4, #4]
 309:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 195              		.loc 1 309 0
 196 000c 1023     		movs	r3, #16
 197 000e A360     		str	r3, [r4, #8]
 310:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 198              		.loc 1 310 0
 199 0010 0F3B     		subs	r3, r3, #15
 200 0012 E360     		str	r3, [r4, #12]
 311:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 201              		.loc 1 311 0
 202 0014 0023     		movs	r3, #0
 203 0016 2361     		str	r3, [r4, #16]
 312:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 204              		.loc 1 312 0
 205 0018 6361     		str	r3, [r4, #20]
 313:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 206              		.loc 1 313 0
 207 001a A361     		str	r3, [r4, #24]
 314:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 208              		.loc 1 314 0
 209 001c E361     		str	r3, [r4, #28]
 315:Src/main.c    ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 12


 210              		.loc 1 315 0
 211 001e 2362     		str	r3, [r4, #32]
 316:Src/main.c    ****   {
 212              		.loc 1 316 0
 213 0020 2000     		movs	r0, r4
 214 0022 FFF7FEFF 		bl	HAL_I2C_Init
 215              	.LVL4:
 322:Src/main.c    ****   {
 216              		.loc 1 322 0
 217 0026 0021     		movs	r1, #0
 218 0028 2000     		movs	r0, r4
 219 002a FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 220              	.LVL5:
 328:Src/main.c    ****   {
 221              		.loc 1 328 0
 222 002e 0021     		movs	r1, #0
 223 0030 2000     		movs	r0, r4
 224 0032 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 225              	.LVL6:
 334:Src/main.c    ****   /* USER CODE BEGIN I2C1_Init 2 */
 226              		.loc 1 334 0
 227 0036 8020     		movs	r0, #128
 228 0038 4001     		lsls	r0, r0, #5
 229 003a FFF7FEFF 		bl	HAL_I2CEx_EnableFastModePlus
 230              	.LVL7:
 339:Src/main.c    **** 
 231              		.loc 1 339 0
 232              		@ sp needed
 233 003e 10BD     		pop	{r4, pc}
 234              	.L9:
 235              		.align	2
 236              	.L8:
 237 0040 00000000 		.word	hi2c1
 238 0044 00540040 		.word	1073763328
 239 0048 13041000 		.word	1049619
 240              		.cfi_endproc
 241              	.LFE39:
 243              		.section	.text.SystemClock_Config,"ax",%progbits
 244              		.align	1
 245              		.global	SystemClock_Config
 246              		.syntax unified
 247              		.code	16
 248              		.thumb_func
 249              		.fpu softvfp
 251              	SystemClock_Config:
 252              	.LFB38:
 249:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 253              		.loc 1 249 0
 254              		.cfi_startproc
 255              		@ args = 0, pretend = 0, frame = 96
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0000 10B5     		push	{r4, lr}
 258              	.LCFI4:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 4, -8
 261              		.cfi_offset 14, -4
 262 0002 98B0     		sub	sp, sp, #96
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 13


 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 104
 250:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 265              		.loc 1 250 0
 266 0004 3422     		movs	r2, #52
 267 0006 0021     		movs	r1, #0
 268 0008 0BA8     		add	r0, sp, #44
 269 000a FFF7FEFF 		bl	memset
 270              	.LVL8:
 251:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 271              		.loc 1 251 0
 272 000e 1422     		movs	r2, #20
 273 0010 0021     		movs	r1, #0
 274 0012 06A8     		add	r0, sp, #24
 275 0014 FFF7FEFF 		bl	memset
 276              	.LVL9:
 252:Src/main.c    **** 
 277              		.loc 1 252 0
 278 0018 1822     		movs	r2, #24
 279 001a 0021     		movs	r1, #0
 280 001c 6846     		mov	r0, sp
 281 001e FFF7FEFF 		bl	memset
 282              	.LVL10:
 256:Src/main.c    ****   /**Initializes the CPU, AHB and APB busses clocks 
 283              		.loc 1 256 0
 284 0022 1749     		ldr	r1, .L11
 285 0024 0B68     		ldr	r3, [r1]
 286 0026 174A     		ldr	r2, .L11+4
 287 0028 1A40     		ands	r2, r3
 288 002a 8023     		movs	r3, #128
 289 002c 1B01     		lsls	r3, r3, #4
 290 002e 1343     		orrs	r3, r2
 291 0030 0B60     		str	r3, [r1]
 259:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 292              		.loc 1 259 0
 293 0032 0223     		movs	r3, #2
 294 0034 0B93     		str	r3, [sp, #44]
 260:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 295              		.loc 1 260 0
 296 0036 0122     		movs	r2, #1
 297 0038 0E92     		str	r2, [sp, #56]
 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 298              		.loc 1 261 0
 299 003a 0F32     		adds	r2, r2, #15
 300 003c 0F92     		str	r2, [sp, #60]
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 301              		.loc 1 262 0
 302 003e 1493     		str	r3, [sp, #80]
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 303              		.loc 1 263 0
 304 0040 0024     		movs	r4, #0
 305 0042 1594     		str	r4, [sp, #84]
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 306              		.loc 1 264 0
 307 0044 8023     		movs	r3, #128
 308 0046 DB02     		lsls	r3, r3, #11
 309 0048 1693     		str	r3, [sp, #88]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 14


 265:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 310              		.loc 1 265 0
 311 004a 8023     		movs	r3, #128
 312 004c DB03     		lsls	r3, r3, #15
 313 004e 1793     		str	r3, [sp, #92]
 266:Src/main.c    ****   {
 314              		.loc 1 266 0
 315 0050 0BA8     		add	r0, sp, #44
 316 0052 FFF7FEFF 		bl	HAL_RCC_OscConfig
 317              	.LVL11:
 272:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 318              		.loc 1 272 0
 319 0056 0F23     		movs	r3, #15
 320 0058 0693     		str	r3, [sp, #24]
 274:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 321              		.loc 1 274 0
 322 005a 0C3B     		subs	r3, r3, #12
 323 005c 0793     		str	r3, [sp, #28]
 275:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 324              		.loc 1 275 0
 325 005e 0894     		str	r4, [sp, #32]
 276:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 326              		.loc 1 276 0
 327 0060 0994     		str	r4, [sp, #36]
 277:Src/main.c    **** 
 328              		.loc 1 277 0
 329 0062 0A94     		str	r4, [sp, #40]
 279:Src/main.c    ****   {
 330              		.loc 1 279 0
 331 0064 0121     		movs	r1, #1
 332 0066 06A8     		add	r0, sp, #24
 333 0068 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 334              	.LVL12:
 283:Src/main.c    ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 335              		.loc 1 283 0
 336 006c 0A23     		movs	r3, #10
 337 006e 0093     		str	r3, [sp]
 284:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 338              		.loc 1 284 0
 339 0070 0294     		str	r4, [sp, #8]
 285:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 340              		.loc 1 285 0
 341 0072 0494     		str	r4, [sp, #16]
 286:Src/main.c    ****   {
 342              		.loc 1 286 0
 343 0074 6846     		mov	r0, sp
 344 0076 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 345              	.LVL13:
 290:Src/main.c    **** 
 346              		.loc 1 290 0
 347 007a 18B0     		add	sp, sp, #96
 348              		@ sp needed
 349 007c 10BD     		pop	{r4, pc}
 350              	.L12:
 351 007e C046     		.align	2
 352              	.L11:
 353 0080 00700040 		.word	1073770496
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 15


 354 0084 FFE7FFFF 		.word	-6145
 355              		.cfi_endproc
 356              	.LFE38:
 358              		.section	.text.main,"ax",%progbits
 359              		.align	1
 360              		.global	main
 361              		.syntax unified
 362              		.code	16
 363              		.thumb_func
 364              		.fpu softvfp
 366              	main:
 367              	.LFB37:
 180:Src/main.c    ****   /* USER CODE BEGIN 1 */
 368              		.loc 1 180 0
 369              		.cfi_startproc
 370              		@ args = 0, pretend = 0, frame = 0
 371              		@ frame_needed = 0, uses_anonymous_args = 0
 372 0000 10B5     		push	{r4, lr}
 373              	.LCFI6:
 374              		.cfi_def_cfa_offset 8
 375              		.cfi_offset 4, -8
 376              		.cfi_offset 14, -4
 188:Src/main.c    **** 
 377              		.loc 1 188 0
 378 0002 FFF7FEFF 		bl	HAL_Init
 379              	.LVL14:
 195:Src/main.c    **** 
 380              		.loc 1 195 0
 381 0006 FFF7FEFF 		bl	SystemClock_Config
 382              	.LVL15:
 202:Src/main.c    ****   MX_USART2_UART_Init();
 383              		.loc 1 202 0
 384 000a FFF7FEFF 		bl	MX_GPIO_Init
 385              	.LVL16:
 203:Src/main.c    ****   MX_I2C1_Init();
 386              		.loc 1 203 0
 387 000e FFF7FEFF 		bl	MX_USART2_UART_Init
 388              	.LVL17:
 204:Src/main.c    ****   /* USER CODE BEGIN 2 */
 389              		.loc 1 204 0
 390 0012 FFF7FEFF 		bl	MX_I2C1_Init
 391              	.LVL18:
 207:Src/main.c    **** 
 392              		.loc 1 207 0
 393 0016 0020     		movs	r0, #0
 394 0018 FFF7FEFF 		bl	BSP_LED_Init
 395              	.LVL19:
 209:Src/main.c    **** 
 396              		.loc 1 209 0
 397 001c 0020     		movs	r0, #0
 398 001e FFF7FEFF 		bl	BSP_LED_Off
 399              	.LVL20:
 215:Src/main.c    **** 
 400              		.loc 1 215 0
 401 0022 0122     		movs	r2, #1
 402 0024 0249     		ldr	r1, .L15
 403 0026 0348     		ldr	r0, .L15+4
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 16


 404 0028 FFF7FEFF 		bl	HAL_UART_Receive_IT
 405              	.LVL21:
 406              	.L14:
 407 002c FEE7     		b	.L14
 408              	.L16:
 409 002e C046     		.align	2
 410              	.L15:
 411 0030 00000000 		.word	.LANCHOR0
 412 0034 00000000 		.word	huart2
 413              		.cfi_endproc
 414              	.LFE37:
 416              		.section	.text.circ_bbuf_push,"ax",%progbits
 417              		.align	1
 418              		.global	circ_bbuf_push
 419              		.syntax unified
 420              		.code	16
 421              		.thumb_func
 422              		.fpu softvfp
 424              	circ_bbuf_push:
 425              	.LFB45:
 401:Src/main.c    **** 
 402:Src/main.c    **** /* USER CODE BEGIN 4 */
 403:Src/main.c    **** 
 404:Src/main.c    **** /*!
 405:Src/main.c    ****  *  @brief  Analyse des différents charactères des données de la trame pour reconnaitre ou non l
 406:Src/main.c    ****  *  @param  str      Données reçu par UART
 407:Src/main.c    ****  *  @retval boolean
 408:Src/main.c    ****  */
 409:Src/main.c    **** static bool isDevEui(char *str)
 410:Src/main.c    **** {
 411:Src/main.c    ****   bool ret = false;
 412:Src/main.c    **** 
 413:Src/main.c    ****   if ((strlen(str) - 1) >= 37)
 414:Src/main.c    ****   {
 415:Src/main.c    ****     for (int i = 15, k = i + 2; i < 37; i++)
 416:Src/main.c    ****     {
 417:Src/main.c    ****       if (k != i)
 418:Src/main.c    ****       {
 419:Src/main.c    ****         if (isxdigit(str[i]))
 420:Src/main.c    ****           ret = true;
 421:Src/main.c    ****         else
 422:Src/main.c    ****           ret = false;
 423:Src/main.c    ****       }
 424:Src/main.c    ****       else
 425:Src/main.c    ****       {
 426:Src/main.c    ****         k += 3;
 427:Src/main.c    ****       }
 428:Src/main.c    ****     }
 429:Src/main.c    ****   }
 430:Src/main.c    ****   return ret;
 431:Src/main.c    **** }
 432:Src/main.c    **** 
 433:Src/main.c    **** /*!
 434:Src/main.c    ****  *  @brief  Vérifie si le devEui n'est pas initialisé
 435:Src/main.c    ****  *  @retval boolean
 436:Src/main.c    ****  */
 437:Src/main.c    **** static bool isEmptyDevEui()
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 17


 438:Src/main.c    **** {
 439:Src/main.c    ****   bool ret = false;
 440:Src/main.c    ****   for (int i = 0; i < 7; i++)
 441:Src/main.c    ****   {
 442:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 443:Src/main.c    ****     ret = (deveui_table[uartPort - 1][i] == 0) ? true : false;
 444:Src/main.c    **** #else
 445:Src/main.c    ****     ret = (devEui[i] == 0) ? true : false;
 446:Src/main.c    **** #endif
 447:Src/main.c    ****   }
 448:Src/main.c    ****   return ret;
 449:Src/main.c    **** }
 450:Src/main.c    **** 
 451:Src/main.c    **** /*!
 452:Src/main.c    ****  *  @brief  Permet de reconstituer le DevEui au format envoyer par i2c
 453:Src/main.c    ****  *  @param  str_deveui   chaine de charatère contenant le DevEui non formaté
 454:Src/main.c    ****  *  @retval none
 455:Src/main.c    ****  */
 456:Src/main.c    **** static void devEuiFormat(uint8_t *str_deveui)
 457:Src/main.c    **** {
 458:Src/main.c    ****   char buff[3];
 459:Src/main.c    ****   int ibuff = 0;
 460:Src/main.c    ****   for (int i = 0, k = 0; i < strlen((char *)str_deveui); i++)
 461:Src/main.c    ****   {
 462:Src/main.c    ****     if (i <= 15)
 463:Src/main.c    ****       continue;
 464:Src/main.c    ****     if (str_deveui[i] != '-' && str_deveui[i + 1] != '-' && i != 37)
 465:Src/main.c    ****     {
 466:Src/main.c    ****       //on utilise un for au lieu d'une simple copie de valeur de str_deveui à buff car problème 
 467:Src/main.c    ****       for (int j = '0'; j <= 'F'; j++)
 468:Src/main.c    ****       {
 469:Src/main.c    ****         if (isxdigit(j))
 470:Src/main.c    ****         {
 471:Src/main.c    ****           if (j == str_deveui[i])
 472:Src/main.c    ****             buff[0] = j;
 473:Src/main.c    ****           if (j == str_deveui[i + 1])
 474:Src/main.c    ****             buff[1] = j;
 475:Src/main.c    ****         }
 476:Src/main.c    ****       }
 477:Src/main.c    ****       buff[2] = '\0';
 478:Src/main.c    ****       //conversion en base 16 du buffer dans un entier
 479:Src/main.c    ****       ibuff = (int)strtol(buff, NULL, 16);
 480:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 481:Src/main.c    ****       deveui_table[uartPort - 1][k] = ibuff;
 482:Src/main.c    **** #else
 483:Src/main.c    ****       devEui[k] = ibuff;
 484:Src/main.c    **** #endif
 485:Src/main.c    ****       k++;
 486:Src/main.c    ****     }
 487:Src/main.c    ****     if (i == 37)
 488:Src/main.c    ****       break;
 489:Src/main.c    ****   }
 490:Src/main.c    **** }
 491:Src/main.c    **** 
 492:Src/main.c    **** #if USE_I2C == 1
 493:Src/main.c    **** /*!
 494:Src/main.c    ****  *  @brief  Permet de formater la chaine selon le format suivant : 
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 18


 495:Src/main.c    ****  *    - i=0             i2c addr
 496:Src/main.c    ****  *    - i=1             uart port
 497:Src/main.c    ****  *    - i=2 à i=10      device unique id
 498:Src/main.c    ****  *    - i>10            payload
 499:Src/main.c    ****  *  @param  str_deveui   chaine de charatère contenant le DevEui non formaté
 500:Src/main.c    ****  *  @retval none
 501:Src/main.c    ****  */
 502:Src/main.c    **** /*
 503:Src/main.c    **** static void buildI2cFrame(char *payload)
 504:Src/main.c    **** {
 505:Src/main.c    ****   //on remet la chaine à 0
 506:Src/main.c    ****   iTxData[0] = '\0';
 507:Src/main.c    ****   for (int i = 0, k = 0; i < 10; i++)
 508:Src/main.c    ****   {
 509:Src/main.c    ****     //i2c addr
 510:Src/main.c    ****     if (i == 0)
 511:Src/main.c    ****     {
 512:Src/main.c    ****       iTxData[i] = I2C_ADDRESS;
 513:Src/main.c    ****     }
 514:Src/main.c    ****     //uart port
 515:Src/main.c    ****     else if (i == 1)
 516:Src/main.c    ****     {
 517:Src/main.c    ****       iTxData[i] = uartPort;
 518:Src/main.c    ****     }
 519:Src/main.c    ****     //DevEui
 520:Src/main.c    ****     else
 521:Src/main.c    ****     {
 522:Src/main.c    **** #if USE_MULTIPLE_UART == 1
 523:Src/main.c    ****       iTxData[i] = deveui_table[uartPort - 1][k];
 524:Src/main.c    **** #else
 525:Src/main.c    ****       iTxData[i] = devEui[k];
 526:Src/main.c    **** #endif
 527:Src/main.c    ****       k++;
 528:Src/main.c    ****     }
 529:Src/main.c    ****   }
 530:Src/main.c    ****   iTxData[10] = '\0';
 531:Src/main.c    **** 
 532:Src/main.c    ****   strcat((char *)iTxData, payload);
 533:Src/main.c    **** }
 534:Src/main.c    **** */
 535:Src/main.c    **** #endif
 536:Src/main.c    **** 
 537:Src/main.c    **** /*!
 538:Src/main.c    ****  * @brief   Permet de mettre une valeur dans le buffer circulaire
 539:Src/main.c    ****  * @param   c           circular buffer address
 540:Src/main.c    ****  * @param   data        données à mettre dans le buffer circulaire
 541:Src/main.c    ****  * @retval  int         0 - Success
 542:Src/main.c    ****  *                     -1 - Out of space
 543:Src/main.c    ****  */
 544:Src/main.c    **** int circ_bbuf_push(circ_bbuf_t *c, uint8_t data)
 545:Src/main.c    **** {
 426              		.loc 1 545 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              	.LVL22:
 431 0000 10B5     		push	{r4, lr}
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 19


 432              	.LCFI7:
 433              		.cfi_def_cfa_offset 8
 434              		.cfi_offset 4, -8
 435              		.cfi_offset 14, -4
 546:Src/main.c    ****   int next;
 547:Src/main.c    **** 
 548:Src/main.c    ****   next = c->head + 1; // next is where head will point to after this write.
 436              		.loc 1 548 0
 437 0002 4268     		ldr	r2, [r0, #4]
 438 0004 531C     		adds	r3, r2, #1
 439              	.LVL23:
 549:Src/main.c    ****   if (next >= c->maxlen)
 440              		.loc 1 549 0
 441 0006 C468     		ldr	r4, [r0, #12]
 442 0008 9C42     		cmp	r4, r3
 443 000a 00DC     		bgt	.L18
 550:Src/main.c    ****     next = 0;
 444              		.loc 1 550 0
 445 000c 0023     		movs	r3, #0
 446              	.LVL24:
 447              	.L18:
 551:Src/main.c    **** 
 552:Src/main.c    ****   // if the head + 1 == tail, circular buffer is full. Notice that one slot
 553:Src/main.c    ****   // is always left empty to differentiate empty vs full condition
 554:Src/main.c    ****   if (next == c->tail)
 448              		.loc 1 554 0
 449 000e 8468     		ldr	r4, [r0, #8]
 450 0010 9C42     		cmp	r4, r3
 451 0012 04D0     		beq	.L21
 555:Src/main.c    ****     return -1;
 556:Src/main.c    **** 
 557:Src/main.c    ****   c->buffer[c->head] = data; // Load data and then move
 452              		.loc 1 557 0
 453 0014 0468     		ldr	r4, [r0]
 454 0016 A154     		strb	r1, [r4, r2]
 558:Src/main.c    ****   c->head = next;            // head to next data offset.
 455              		.loc 1 558 0
 456 0018 4360     		str	r3, [r0, #4]
 559:Src/main.c    ****   return 0;                  // return success to indicate successful push.
 457              		.loc 1 559 0
 458 001a 0020     		movs	r0, #0
 459              	.LVL25:
 460              	.L17:
 560:Src/main.c    **** }
 461              		.loc 1 560 0
 462              		@ sp needed
 463 001c 10BD     		pop	{r4, pc}
 464              	.LVL26:
 465              	.L21:
 555:Src/main.c    **** 
 466              		.loc 1 555 0
 467 001e 0120     		movs	r0, #1
 468              	.LVL27:
 469 0020 4042     		rsbs	r0, r0, #0
 470 0022 FBE7     		b	.L17
 471              		.cfi_endproc
 472              	.LFE45:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 20


 474              		.section	.text.circ_bbuf_pop,"ax",%progbits
 475              		.align	1
 476              		.global	circ_bbuf_pop
 477              		.syntax unified
 478              		.code	16
 479              		.thumb_func
 480              		.fpu softvfp
 482              	circ_bbuf_pop:
 483              	.LFB46:
 561:Src/main.c    **** 
 562:Src/main.c    **** /*!
 563:Src/main.c    ****  * @brief   Permet de récupérer la valeur à lire dans le buffer circulaire
 564:Src/main.c    ****  * @param   c           circular buffer address
 565:Src/main.c    ****  * @param   data        variable pour acceuillir la valeur pop
 566:Src/main.c    ****  * @retval  int         0 - Success
 567:Src/main.c    ****  *                     -1 - Empty
 568:Src/main.c    ****  */
 569:Src/main.c    **** int circ_bbuf_pop(circ_bbuf_t *c, uint8_t *data)
 570:Src/main.c    **** {
 484              		.loc 1 570 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              	.LVL28:
 489 0000 10B5     		push	{r4, lr}
 490              	.LCFI8:
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 4, -8
 493              		.cfi_offset 14, -4
 571:Src/main.c    ****   int next;
 572:Src/main.c    **** 
 573:Src/main.c    ****   if (c->head == c->tail) // if the head == tail, we don't have any data
 494              		.loc 1 573 0
 495 0002 8368     		ldr	r3, [r0, #8]
 496 0004 4268     		ldr	r2, [r0, #4]
 497 0006 9A42     		cmp	r2, r3
 498 0008 0AD0     		beq	.L25
 574:Src/main.c    ****     return -1;
 575:Src/main.c    **** 
 576:Src/main.c    ****   next = c->tail + 1; // next is where tail will point to after this read.
 499              		.loc 1 576 0
 500 000a 5A1C     		adds	r2, r3, #1
 501              	.LVL29:
 577:Src/main.c    ****   if (next >= c->maxlen)
 502              		.loc 1 577 0
 503 000c C468     		ldr	r4, [r0, #12]
 504 000e 9442     		cmp	r4, r2
 505 0010 00DC     		bgt	.L24
 578:Src/main.c    ****     next = 0;
 506              		.loc 1 578 0
 507 0012 0022     		movs	r2, #0
 508              	.LVL30:
 509              	.L24:
 579:Src/main.c    **** 
 580:Src/main.c    ****   *data = c->buffer[c->tail]; // Read data and then move
 510              		.loc 1 580 0
 511 0014 0468     		ldr	r4, [r0]
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 21


 512 0016 E35C     		ldrb	r3, [r4, r3]
 513 0018 0B70     		strb	r3, [r1]
 581:Src/main.c    ****   c->tail = next;             // tail to next offset.
 514              		.loc 1 581 0
 515 001a 8260     		str	r2, [r0, #8]
 582:Src/main.c    ****   return 0;                   // return success to indicate successful push.
 516              		.loc 1 582 0
 517 001c 0020     		movs	r0, #0
 518              	.LVL31:
 519              	.L22:
 583:Src/main.c    **** }
 520              		.loc 1 583 0
 521              		@ sp needed
 522 001e 10BD     		pop	{r4, pc}
 523              	.LVL32:
 524              	.L25:
 574:Src/main.c    **** 
 525              		.loc 1 574 0
 526 0020 0120     		movs	r0, #1
 527              	.LVL33:
 528 0022 4042     		rsbs	r0, r0, #0
 529 0024 FBE7     		b	.L22
 530              		.cfi_endproc
 531              	.LFE46:
 533              		.section	.text.circ_bbuf_free_space,"ax",%progbits
 534              		.align	1
 535              		.global	circ_bbuf_free_space
 536              		.syntax unified
 537              		.code	16
 538              		.thumb_func
 539              		.fpu softvfp
 541              	circ_bbuf_free_space:
 542              	.LFB47:
 584:Src/main.c    **** 
 585:Src/main.c    **** /*!
 586:Src/main.c    ****  * @brief   Permet de récupérer la taille de l'espace libre dans le buffer circulaire
 587:Src/main.c    ****  * @param   c           circular buffer address
 588:Src/main.c    ****  * @retval  int         number of bytes available
 589:Src/main.c    ****  */
 590:Src/main.c    **** int circ_bbuf_free_space(circ_bbuf_t *c)
 591:Src/main.c    **** {
 543              		.loc 1 591 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 0
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548              	.LVL34:
 592:Src/main.c    ****   int freeSpace;
 593:Src/main.c    ****   freeSpace = c->tail - c->head;
 549              		.loc 1 593 0
 550 0000 8368     		ldr	r3, [r0, #8]
 551 0002 4268     		ldr	r2, [r0, #4]
 552 0004 9B1A     		subs	r3, r3, r2
 553              	.LVL35:
 594:Src/main.c    ****   if (freeSpace <= 0)
 554              		.loc 1 594 0
 555 0006 002B     		cmp	r3, #0
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 22


 556 0008 01DD     		ble	.L29
 557              	.L28:
 595:Src/main.c    ****     freeSpace += c->maxlen;
 596:Src/main.c    ****   return freeSpace - 1; // -1 to account for the always-empty slot.
 558              		.loc 1 596 0
 559 000a 581E     		subs	r0, r3, #1
 560              	.LVL36:
 597:Src/main.c    **** }
 561              		.loc 1 597 0
 562              		@ sp needed
 563 000c 7047     		bx	lr
 564              	.LVL37:
 565              	.L29:
 595:Src/main.c    ****     freeSpace += c->maxlen;
 566              		.loc 1 595 0
 567 000e C268     		ldr	r2, [r0, #12]
 568 0010 9B18     		adds	r3, r3, r2
 569              	.LVL38:
 570 0012 FAE7     		b	.L28
 571              		.cfi_endproc
 572              	.LFE47:
 574              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 575              		.align	1
 576              		.global	HAL_UART_RxCpltCallback
 577              		.syntax unified
 578              		.code	16
 579              		.thumb_func
 580              		.fpu softvfp
 582              	HAL_UART_RxCpltCallback:
 583              	.LFB48:
 598:Src/main.c    **** 
 599:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 600:Src/main.c    **** {
 584              		.loc 1 600 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL39:
 589 0000 10B5     		push	{r4, lr}
 590              	.LCFI9:
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 4, -8
 593              		.cfi_offset 14, -4
 601:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, &txBuff, 1);
 594              		.loc 1 601 0
 595 0002 0122     		movs	r2, #1
 596 0004 0349     		ldr	r1, .L31
 597 0006 0448     		ldr	r0, .L31+4
 598              	.LVL40:
 599 0008 FFF7FEFF 		bl	HAL_UART_Receive_IT
 600              	.LVL41:
 602:Src/main.c    ****   
 603:Src/main.c    ****   BSP_LED_Toggle(LED3);
 601              		.loc 1 603 0
 602 000c 0020     		movs	r0, #0
 603 000e FFF7FEFF 		bl	BSP_LED_Toggle
 604              	.LVL42:
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 23


 604:Src/main.c    **** }
 605              		.loc 1 604 0
 606              		@ sp needed
 607 0012 10BD     		pop	{r4, pc}
 608              	.L32:
 609              		.align	2
 610              	.L31:
 611 0014 00000000 		.word	.LANCHOR0
 612 0018 00000000 		.word	huart2
 613              		.cfi_endproc
 614              	.LFE48:
 616              		.section	.text.Error_Handler,"ax",%progbits
 617              		.align	1
 618              		.global	Error_Handler
 619              		.syntax unified
 620              		.code	16
 621              		.thumb_func
 622              		.fpu softvfp
 624              	Error_Handler:
 625              	.LFB49:
 605:Src/main.c    **** 
 606:Src/main.c    **** /* USER CODE END 4 */
 607:Src/main.c    **** 
 608:Src/main.c    **** /**
 609:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 610:Src/main.c    ****   * @retval None
 611:Src/main.c    ****   */
 612:Src/main.c    **** void Error_Handler(void)
 613:Src/main.c    **** {
 626              		.loc 1 613 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 614:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 615:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 616:Src/main.c    **** 
 617:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 618:Src/main.c    **** }
 631              		.loc 1 618 0
 632              		@ sp needed
 633 0000 7047     		bx	lr
 634              		.cfi_endproc
 635              	.LFE49:
 637              		.global	uartPort
 638              		.global	devEui
 639              		.global	rxBuff
 640              		.global	txBuff
 641              		.global	cbuf
 642              		.comm	cbuf_data_space,1025,4
 643              		.comm	huart2,128,4
 644              		.comm	hi2c1,76,4
 645              		.section	.bss.devEui,"aw",%nobits
 646              		.align	2
 649              	devEui:
 650 0000 00000000 		.space	8
 650      00000000 
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 24


 651              		.section	.bss.rxBuff,"aw",%nobits
 652              		.align	2
 655              	rxBuff:
 656 0000 0000     		.space	2
 657              		.section	.bss.txBuff,"aw",%nobits
 658              		.set	.LANCHOR0,. + 0
 661              	txBuff:
 662 0000 00       		.space	1
 663              		.section	.data.cbuf,"aw",%progbits
 664              		.align	2
 667              	cbuf:
 668 0000 00000000 		.word	cbuf_data_space
 669 0004 00000000 		.word	0
 670 0008 00000000 		.word	0
 671 000c 01040000 		.word	1025
 672              		.section	.data.uartPort,"aw",%progbits
 675              	uartPort:
 676 0000 02       		.byte	2
 677              		.text
 678              	.Letext0:
 679              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 680              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include\
 681              		.file 4 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/system_stm32l0xx.h"
 682              		.file 5 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 683              		.file 6 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 684              		.file 7 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 685              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 686              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 687              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 688              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c.h"
 689              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 690              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 691              		.file 14 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 692              		.file 15 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 693              		.file 16 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\lib\\gcc\\arm-none-eab
 694              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 695              		.file 18 "Drivers/BSP/STM32L0XX_Nucleo_32/stm32l0xx_nucleo_32.h"
 696              		.file 19 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 697              		.file 20 "c:\\program files (x86)\\gnu tools arm embedded\\7 2017-q4-major\\arm-none-eabi\\include
 698              		.file 21 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_i2c_ex.h"
 699              		.file 22 "<built-in>"
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 25


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:16     .text.MX_GPIO_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:22     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:107    .text.MX_GPIO_Init:00000064 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:113    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:119    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:164    .text.MX_USART2_UART_Init:00000028 $d
                            *COM*:00000080 huart2
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:171    .text.MX_I2C1_Init:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:177    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:237    .text.MX_I2C1_Init:00000040 $d
                            *COM*:0000004c hi2c1
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:244    .text.SystemClock_Config:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:251    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:353    .text.SystemClock_Config:00000080 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:359    .text.main:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:366    .text.main:00000000 main
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:411    .text.main:00000030 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:417    .text.circ_bbuf_push:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:424    .text.circ_bbuf_push:00000000 circ_bbuf_push
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:475    .text.circ_bbuf_pop:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:482    .text.circ_bbuf_pop:00000000 circ_bbuf_pop
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:534    .text.circ_bbuf_free_space:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:541    .text.circ_bbuf_free_space:00000000 circ_bbuf_free_space
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:575    .text.HAL_UART_RxCpltCallback:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:582    .text.HAL_UART_RxCpltCallback:00000000 HAL_UART_RxCpltCallback
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:611    .text.HAL_UART_RxCpltCallback:00000014 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:617    .text.Error_Handler:00000000 $t
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:624    .text.Error_Handler:00000000 Error_Handler
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:675    .data.uartPort:00000000 uartPort
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:649    .bss.devEui:00000000 devEui
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:655    .bss.rxBuff:00000000 rxBuff
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:661    .bss.txBuff:00000000 txBuff
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:667    .data.cbuf:00000000 cbuf
                            *COM*:00000401 cbuf_data_space
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:646    .bss.devEui:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:652    .bss.rxBuff:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:662    .bss.txBuff:00000000 $d
C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s:664    .data.cbuf:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_UART_Init
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_I2CEx_EnableFastModePlus
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
BSP_LED_Init
BSP_LED_Off
HAL_UART_Receive_IT
ARM GAS  C:\Users\Nicolas\AppData\Local\Temp\ccddCO7K.s 			page 26


BSP_LED_Toggle
